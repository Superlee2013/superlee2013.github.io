<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[从零开始创建gitbook]]></title>
      <url>http://superleehome.oschina.io/2016/10/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9B%E5%BB%BAgitbook/</url>
      <content type="html"><![CDATA[<p>本文是博主在自己使用gitbook创建电子书，并通过github托管时躺过的坑的总结，如有表述不清楚的地方，请在评论区留言交流。本文的结构分为两大模块，分别为<strong>从零开始创建gitbook</strong>和<strong>协作开发gitbook</strong>,并假设所有的读者已有一个github账号。文章可能比较基础，大佬请绕路 ^_^</p>
<blockquote>
<p>由于某墙的原因，访问gitbook和github可能比较慢，请耐心等待，或者google搜索修改host翻墙，或者使用fq梯子，这里博主实力推荐 Lantern 2.2.5 版本(至于为什么是2.2.5版本……因为它free)<br>ps: 前方多图，请在wifi环境下阅读，土豪。。。随意。。</p>
</blockquote>
<a id="more"></a>
<h2 id="从零开始创建gitbook-单人"><a href="#从零开始创建gitbook-单人" class="headerlink" title="从零开始创建gitbook(单人)"></a>从零开始创建gitbook(单人)</h2><p>这里解释一波gitbook和github的关系，首先Gitbook和Git/Github都没有什么关系。它只是一个build book的工具而已，我们写好的markdown格式的文件，放在github上，然后通过gitbook获取到这些内容，在gitbook网站上编译生成html，生成gitbook.io形式的在线预览图书，通过webhook绑定github和gitbook,就能做到提交内容到github仓库，gitbook上的书籍实时更新。</p>
<h3 id="1-申请gitbook账号"><a href="#1-申请gitbook账号" class="headerlink" title="1. 申请gitbook账号"></a>1. 申请gitbook账号</h3><p>已有gitbook账号看官请跳过这一步。<br>google搜索gitbook，进入<a href="https://www.gitbook.com/" target="_blank" rel="external">gitbook官网</a> ,也可以直接注册itbook账号，这里我们使用github登陆激活gitbook，毕竟它们是一家的产品，截图如下：<br><img src="/upload/gitbook/signup.png" alt="signup"><br><img src="/upload/gitbook/signin.png" alt="signin"></p>
<h3 id="2-设置gitbook连接github权限"><a href="#2-设置gitbook连接github权限" class="headerlink" title="2. 设置gitbook连接github权限"></a>2. 设置gitbook连接github权限</h3><p>gitbook需要设置权限，才能连接到github上共有仓库的内容。<br>点击图像处的下拉按钮，选择<strong>Account Settings</strong>,进入gitbook账号设置<br><img src="/upload/gitbook/access.png" alt="access"><br>在<code>Personal settings &gt; Profile &gt; GitHub</code> 中，点击<code>Reconnet GitHub Account</code>按钮，选择<code>With acceess to public repositories</code>，上方会显示绿色的<code>ADDED</code>信息，表示连接成功,如图<br><img src="/upload/gitbook/public.png" alt="public"></p>
<h3 id="3-在github上创建仓库"><a href="#3-在github上创建仓库" class="headerlink" title="3. 在github上创建仓库"></a>3. 在github上创建仓库</h3><p>我们切换到<strong>github</strong>网站，关于如何在github上创建仓库，这里不再赘述，直接上图<br>比如我们的仓库名为<strong>testbook</strong>,记得在最后生成仓库的时候,勾选下面的<code>Initialize this repository with a README</code><br><img src="/upload/gitbook/githubrepo.png" alt="githubrepo"></p>
<h3 id="4-在gitbook上创建书籍"><a href="#4-在gitbook上创建书籍" class="headerlink" title="4. 在gitbook上创建书籍"></a>4. 在gitbook上创建书籍</h3><p>我们切换到<strong>gitbook</strong>网站，新建一本书籍，为了保持一致性，我们的书籍名也叫 <strong>testbook</strong>,当然可凭个人喜好选择书名,记得选择public书籍，如图<br><img src="/upload/gitbook/createbook.png" alt="createbook"></p>
<h3 id="5-连接gitbook与github仓库"><a href="#5-连接gitbook与github仓库" class="headerlink" title="5. 连接gitbook与github仓库"></a>5. 连接gitbook与github仓库</h3><p>这一步是配置gitbook与github连接，让testbook这本书的内容连接到github仓库<br>点击<code>SETTING</code>,选择<code>Settings &gt; Github</code> ,点击<strong>Select a Repository</strong>，选择刚刚第三部在github上创建的仓库，如图：<br><img src="/upload/gitbook/configbook1.png" alt="configbook1"><br><img src="/upload/gitbook/chooserepo.png" alt="chooserepo"><br>点击 <strong>Sync</strong>按钮，进行同步，之后会显示如下界面,表示仓库连接成功：<br><img src="/upload/gitbook/succacc.png" alt="succacc"></p>
<h3 id="6-配置webhook"><a href="#6-配置webhook" class="headerlink" title="6. 配置webhook"></a>6. 配置webhook</h3><p>在gitbook设置里，配置webhook,使github仓库内容和gitbook同步更新<br>点击 <code>Settings &gt; Hooks &gt; New Webhook</code><br><img src="/upload/gitbook/addhook.png" alt="addhook"><br>在 <strong>Payload URL</strong>里填上刚刚github上新建的testbook仓库的地址，Secret可填可不填，博主选择不填<br>github仓库地址获取如下<br><img src="/upload/gitbook/gitaddress.png" alt="gitaddress"><br>gitbook上填写完毕截图如下：<br><img src="/upload/gitbook/hookdetail.png" alt="hookdetail"><br><img src="/upload/gitbook/hookcomplete.png" alt="hookcomplete"><br>此时，在github的testbook仓库设置里，webhooks选项应该会多出一个，表示刚刚配置的gitbook上的webhook连接github成功<br><img src="/upload/gitbook/hookcomplete.png" alt="githubhook"><br>如果没有的话，手动添加截图如下：<br>切换到<strong>gitbook</strong>网站，在gitbook上的testbook书籍设置里获取webhook url<br><img src="/upload/gitbook/gitbookhookurl.png" alt="gitbookhookurl"><br>复制这个url地址，切换到<strong>github</strong>的testbook仓库设置里<br><img src="/upload/gitbook/githubaddhook1.png" alt="githubaddhook1"><br><img src="/upload/gitbook/githubaddhook2.png" alt="githubaddhook2"><br>如果在之前配置<strong>gitbook</strong>的webhook时有设置secret，那么在<strong>github</strong>上的secret选项也要填上</p>
<p><strong>此时，关于gitbook和github的配置已结束</strong><br>测试是否正常工作，在<strong>github</strong>的testbook仓库，点击修改readme.md内容，发起<em>Commit changes</em>,然后在<strong>gitbook</strong>上刷新testbook，点击update,即可预览testbook内容，此时，如果有配置邮件，你会收到一封邮件，通知你的gitbook创建成功了。</p>
<blockquote>
<p>注：不要急着去点击下图的 read shortly,因为gitbook编译可能需要一段时间，过早点击可能造成无法发布生成图书，然后当网络比较慢的时候也可能造成图书生成不成功，这个时候不要方，再来一次，或者等待gitbook服务器修复好(因为gitbook不是特别稳定，容易出bug，博主好几次生不出图书，然后等到第二天，啥都没干，一刷新就好了，所以如果前面的步骤严格遵循，你要相信，这不是你的锅，其实你的书已经发布成功了，可以参考后面的如何本地预览图书)<br><img src="/upload/gitbook/testbook1.png" alt="testbook1"><br><img src="/upload/gitbook/testbook2.png" alt="testbook2"><br><img src="/upload/gitbook/testbook3.png" alt="testbook3"><br><img src="/upload/gitbook/testbook4.png" alt="testbook4"></p>
</blockquote>
<hr>
<h3 id="7-本地编写书籍"><a href="#7-本地编写书籍" class="headerlink" title="7. 本地编写书籍"></a>7. 本地编写书籍</h3><p>我们这里还是以一本空的书籍为开始，从初始化到最终发布，在gitbook上预览<br>编写分为两种，一种是使用gitbook官方提供的客户端，<a href="https://www.gitbook.com/blog/releases" target="_blank" rel="external">gitbook editor</a> , 一种是使用<code>文本编辑器+gitbook命令行+git</code> 来编写，客户端比较简单，看官请自行摸索，我们这里介绍第二种比较极客的编写模式</p>
<h4 id="1-通过npm安装gitbook-cli"><a href="#1-通过npm安装gitbook-cli" class="headerlink" title="1. 通过npm安装gitbook-cli"></a>1. 通过npm安装gitbook-cli</h4><p>npm是nodejs包管理工具，直接下载安装nodejs，会自带npm包管理工具<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g gitbook-cli</div></pre></td></tr></table></figure></p>
<p>全局安装gitbook命令行，安装完毕后，使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gitbook -V</div></pre></td></tr></table></figure></p>
<p>测试是否成功安装gitbook</p>
<h4 id="2-下载github仓库内容，并手动建立-SUMMARY-md"><a href="#2-下载github仓库内容，并手动建立-SUMMARY-md" class="headerlink" title="2. 下载github仓库内容，并手动建立 SUMMARY.md"></a>2. 下载github仓库内容，并手动建立 SUMMARY.md</h4><p>首先下载github上testbook仓库内容，选择一个自己喜欢的目录，比如博主的本地地址 D:\github<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> d:\github</div><div class="line">$ git <span class="built_in">clone</span> https://github.com/Superlee2013/testbook.git</div></pre></td></tr></table></figure></p>
<p>然后进入刚刚下载好的仓库里,新建 SUMMARY.md<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /d/github/testbook</div><div class="line">$ touch SUMMARY.md</div></pre></td></tr></table></figure></p>
<p>这个SUMMARY.md就是最后的书的目录，同时gitbook会根据该文件生成相应的目录结构<br><img src="/upload/gitbook/local1.png" alt="local1"></p>
<h4 id="3-编辑SUMMARY-md-生成目录结构"><a href="#3-编辑SUMMARY-md-生成目录结构" class="headerlink" title="3. 编辑SUMMARY.md,生成目录结构"></a>3. 编辑SUMMARY.md,生成目录结构</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>[<span class="string">简介</span>](<span class="link">README.md</span>)</div><div class="line"><span class="bullet">* </span>[<span class="string">第一章</span>](<span class="link">chapter1/README.md</span>)</div><div class="line">  - [<span class="string">第一节</span>](<span class="link">chapter1/section1.md</span>)</div><div class="line">  - [<span class="string">第二节</span>](<span class="link">chapter1/section2.md</span>)</div><div class="line">  - [<span class="string">第三节</span>](<span class="link">chapter1/section3.md</span>)</div><div class="line">  - [<span class="string">第四节</span>](<span class="link">chapter1/section4.md</span>)</div><div class="line"><span class="bullet">* </span>[<span class="string">第二章</span>](<span class="link">chapter2/README.md</span>)</div><div class="line">  - [<span class="string">第一节</span>](<span class="link">chapter2/section1.md</span>)</div><div class="line">  - [<span class="string">第二节</span>](<span class="link">chapter2/section2.md</span>)</div><div class="line">  - [<span class="string">第三节</span>](<span class="link">chapter2/section3.md</span>)</div><div class="line"><span class="bullet">* </span>[<span class="string">第三章</span>](<span class="link">chapter3/README.md</span>)</div><div class="line">  - [<span class="string">第一节</span>](<span class="link">chapter3/section1.md</span>)</div></pre></td></tr></table></figure>
<p>然后进入命令行，进入testbook这本书的本地目录下，执行如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gitbook init</div></pre></td></tr></table></figure></p>
<p><img src="/upload/gitbook/local2.png" alt="local2"><br>最终本地的目录结构如下：<br><img src="/upload/gitbook/local3.png" alt="local3"><br>然后，可以拿你喜欢的的文本编辑器进行gitbook的书写，博主推荐 <a href="https://www.sublimetext.com/" target="_blank" rel="external">sublime text 3</a> , 当然，如果要实时预览markdown，博主推荐 <a href="http://www.typora.io/" target="_blank" rel="external">typora</a></p>
<h4 id="4-gitbook本地预览"><a href="#4-gitbook本地预览" class="headerlink" title="4. gitbook本地预览"></a>4. gitbook本地预览</h4><p>在推送到远程github之前，可以本地预览最终的gitbook效果，执行如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gitbook serve</div></pre></td></tr></table></figure></p>
<p><img src="/upload/gitbook/gitbookserve.png" alt="gitbookserve"><br>然后，浏览器打开localhost:4000 即可在预览</p>
<h4 id="5-向远程仓库推送"><a href="#5-向远程仓库推送" class="headerlink" title="5. 向远程仓库推送"></a>5. 向远程仓库推送</h4><p>编写好这些markdown文件后，使用git命令行向远程仓库推送<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git commit -m<span class="string">"update"</span></div><div class="line">$ git push origin master</div></pre></td></tr></table></figure></p>
<p>此时，可以查看github仓库有没有推送成功，然后在gitbook上，打开testbook,点击<code>Read</code>,即可看到最终的书籍样式<br><img src="/upload/gitbook/local3.png" alt="bookc1"></p>
<p><strong>到此，从零开始创建gitbook，并通过github托管的所有过程结束，现在可以愉快的编写专属你的电子书了</strong></p>
<h2 id="协同创建gitbook-多人"><a href="#协同创建gitbook-多人" class="headerlink" title="协同创建gitbook(多人)"></a>协同创建gitbook(多人)</h2><p>协作创建的意思是，已经有一个gitbook的书籍了，然后我们fork到github本地，通过发起<code>pull request</code>请求进行协同创作书籍</p>
<h3 id="1-fork仓库到自己的github账号"><a href="#1-fork仓库到自己的github账号" class="headerlink" title="1. fork仓库到自己的github账号"></a>1. fork仓库到自己的github账号</h3><p>找到需要参加协作编写的仓库地址，fork到自己的github账户仓库<br><img src="/upload/gitbook/c1.png" alt="c1"></p>
<h3 id="2-下载到本地"><a href="#2-下载到本地" class="headerlink" title="2. 下载到本地"></a>2. 下载到本地</h3><p>复制刚刚fork到自己的仓库的url地址，clone到本地<br><img src="/upload/gitbook/cf1.png" alt="cf1"><br><img src="/upload/gitbook/c2.png" alt="c2"></p>
<h3 id="3-gitbook本地预览"><a href="#3-gitbook本地预览" class="headerlink" title="3. gitbook本地预览"></a>3. gitbook本地预览</h3><p>在推送到远程github之前，可以本地预览最终的gitbook效果，执行如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gitbook serve</div></pre></td></tr></table></figure></p>
<p><img src="/upload/gitbook/gitbookserve.png" alt="gitbookserve"><br>然后，浏览器打开localhost:4000 即可在预览</p>
<h3 id="4-编写后提交到自己的仓库"><a href="#4-编写后提交到自己的仓库" class="headerlink" title="4.编写后提交到自己的仓库"></a>4.编写后提交到自己的仓库</h3><p><img src="/upload/gitbook/c3.png" alt="c3"></p>
<h3 id="5-在github网站上发起pull-request请求"><a href="#5-在github网站上发起pull-request请求" class="headerlink" title="5. 在github网站上发起pull request请求"></a>5. 在github网站上发起pull request请求</h3><p><img src="/upload/gitbook/c4.png" alt="c4"><br><img src="/upload/gitbook/c5.png" alt="c5"><br><img src="/upload/gitbook/c6.png" alt="c6"></p>
<p>如果有冲突的时候，github网站会给出提示，标识本次pull request可能造成conflict</p>
<p>然后，等待原仓库管理员进行merge操作就可以了</p>
<p>如果你需要从已有的github仓库创建一本属于自己的gitbook，比如上文中你从别人的仓库fork过来的，这个时候，只需要在gitbook上新建图书，然后连接github仓库就好，详细请参考第一部分<strong>从零开始创建gitbook(单人)</strong>,也就是你不需要在github上新建仓库，</p>
<blockquote>
<p>以上即是关于gitbook操作的全部内容，转载请注明出处<br>关于文章中的描述，如有疑问，请在下面的评论区留言，博主会第一时间进行解答更新</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NexT主题配置]]></title>
      <url>http://superleehome.oschina.io/2016/10/20/NexT%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>本文是介绍如何配置hexo建站后的NexT主题，参考来源于<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT使用文档</a>，加上博主自己在进行NexT主题配置时躺过的一些坑，整理成如下文字。<br>注：博主的博客本地地址在d:\hexo下，所以以下文字中介绍的大部分路径以d:\hexo开头</p>
<a id="more"></a>
<p>本文以下内容中，<strong>主题配置文件</strong>  指NexT主题下的  _config.yml文件，比如路径地址为D:\hexo\themes\next\ _config.yml,  <strong>站点配置文件</strong> 指整个站点的  _config.yml文件，比如路径地址为D:\hexo\_config.yml </p>
<h3 id="添加「标签」页面"><a href="#添加「标签」页面" class="headerlink" title="添加「标签」页面"></a>添加「标签」页面</h3><p>新建「标签」页面，并在菜单中显示「标签」链接。「标签」页面将展示站点的所有标签，若你的所有文章都未包含标签，此页面将是空的。 底下代码是一篇包含标签的文章的例子：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> NexT主题配置</div><div class="line"><span class="attr">date:</span> <span class="number">2016</span><span class="bullet">-10</span><span class="bullet">-20</span> <span class="number">15</span>:<span class="number">15</span>:<span class="number">50</span></div><div class="line"><span class="attr">tags:</span> [<span class="string">'博客'</span>,<span class="string">'建站'</span>]</div><div class="line"><span class="attr">categories:</span> 建站</div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure></p>
<p>关于如何开启标签页面，步骤如下：</p>
<ol>
<li><p>新建页面<br>在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 tags ：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> your-hexo-site</div><div class="line">$ hexo new page tags</div></pre></td></tr></table></figure>
</li>
<li><p>设置页面类型<br>进入到 D:\hexo\source\tags,编辑刚刚生成的index.md</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> tags</div><div class="line"><span class="attr">date:</span> <span class="number">2016</span><span class="bullet">-07</span><span class="bullet">-26</span> <span class="number">10</span>:<span class="number">50</span>:<span class="number">22</span></div><div class="line"><span class="attr">type:</span> <span class="string">"tags"</span></div><div class="line"><span class="attr">comments:</span> <span class="literal">false</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure>
</li>
<li><p>修改菜单<br>编辑 <strong>站点配置文件</strong>,在菜单中添加链接，添加 tags 到 menu 中，如下：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">menu:</span></div><div class="line"><span class="attr">  home:</span> /</div><div class="line"><span class="attr">  archives:</span> /archives</div><div class="line"><span class="attr">  tags:</span> /tags</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>冒号后面一定要有一个空格</p>
</blockquote>
<h3 id="添加「分类」页面"><a href="#添加「分类」页面" class="headerlink" title="添加「分类」页面"></a>添加「分类」页面</h3><p>新建「分类」页面，并在菜单中显示「分类」链接。「分类」页面将展示站点的所有分类，若你的所有文章都未包含分类，此页面将是空的。 底下代码是一篇包含分类的文章的例子：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> 分类测试文章</div><div class="line"><span class="attr">categories:</span> Testing</div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure></p>
<ol>
<li><p>新建页面<br>在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 categories </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> your-hexo-site</div><div class="line">$ hexo new page categories</div></pre></td></tr></table></figure>
</li>
<li><p>设置页面类型<br>编辑刚新建的页面，将页面的 type 设置为 categories ，主题将自动为这个页面显示分类。页面内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> categories</div><div class="line"><span class="attr">date:</span> <span class="number">2016</span><span class="bullet">-07</span><span class="bullet">-26</span> <span class="number">10</span>:<span class="number">53</span>:<span class="number">45</span></div><div class="line"><span class="attr">type:</span> <span class="string">"categories"</span></div><div class="line"><span class="attr">comments:</span> <span class="literal">false</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure>
</li>
<li><p>修改菜单<br>在菜单中添加链接。编辑 主题配置文件 ， 添加 categories 到 menu 中，如下:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">menu:</span></div><div class="line"><span class="attr">  home:</span> /</div><div class="line"><span class="attr">  archives:</span> /archives</div><div class="line"><span class="attr">  categories:</span> /categories</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="添加「关于我」页面"><a href="#添加「关于我」页面" class="headerlink" title="添加「关于我」页面"></a>添加「关于我」页面</h3><p>新建「关于我」页面，并在菜单中显示「关于我」链接。「关于我」页面将展示博主个人信息</p>
<ol>
<li><p>新建页面<br>在终端窗口下，定位到 Hexo 站点目录下。使用 hexo new page 新建一个页面，命名为 about </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> your-hexo-site</div><div class="line">$ hexo new page about</div></pre></td></tr></table></figure>
</li>
<li><p>设置页面类型<br>编辑刚新建的页面，将页面的 type 设置为 about ，主题将自动为这个页面显示关于我。页面内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> about</div><div class="line"><span class="attr">date:</span> <span class="number">2016</span><span class="bullet">-07</span><span class="bullet">-26</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">42</span></div><div class="line"><span class="attr">type:</span> <span class="string">"about"</span></div><div class="line"><span class="attr">comments:</span> <span class="literal">false</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure>
</li>
<li><p>修改菜单<br>在菜单中添加链接。编辑 主题配置文件 ， 添加 about 到 menu 中，如下:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">menu:</span></div><div class="line"><span class="attr">  home:</span> /</div><div class="line"><span class="attr">  archives:</span> /archives</div><div class="line"><span class="attr">  categories:</span> /categories</div><div class="line"><span class="attr">  tags:</span> /tags</div><div class="line"><span class="attr">  about:</span> /about</div><div class="line">  <span class="comment">#commonweal: /404.html</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>编辑 D:\hexo\source\about 下 index.md ,添加需要显示的个人信息内容，即可显示aboutme</p>
<h3 id="开启菜单栏icon"><a href="#开启菜单栏icon" class="headerlink" title="开启菜单栏icon"></a>开启菜单栏icon</h3><p>修改 <strong>主题配置文件</strong> ，为menu添加icon图标<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">menu_icons:</div><div class="line">  enable: true</div><div class="line">  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</div><div class="line">  home: home</div><div class="line">  about: user</div><div class="line">  categories: th</div><div class="line">  tags: tags</div><div class="line">  archives: archive</div><div class="line">  commonweal: heartbeat</div></pre></td></tr></table></figure></p>
<h3 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h3><p>越来越多的平台（微信公众平台，新浪微博，简书，百度打赏等）支持打赏功能，付费阅读时代越来越近，特此增加了打赏功能，支持微信打赏和支付宝打赏。 只需要<strong>主题配置文件</strong> 中填入 微信 和 支付宝 收款二维码图片地址 即可开启该功能。</p>
<blockquote>
<p>比如，下载支付宝收款图片，命名为 alipay.jpg, 将该图片放在 D:\hexo\themes\next\source\images 下，此时，配置文件中图片地址url为 /images/alipay.jpg</p>
</blockquote>
<p>以下是代码示例：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">reward_comment:</span> 坚持原创技术分享，您的支持将鼓励我继续创作！</div><div class="line"><span class="attr">wechatpay:</span> /path/to/wechat-reward-image                 </div><div class="line"><span class="attr">alipay:</span> /path/to/alipay-reward-image</div></pre></td></tr></table></figure></p>
<h3 id="侧边栏社交链接"><a href="#侧边栏社交链接" class="headerlink" title="侧边栏社交链接"></a>侧边栏社交链接</h3><p>侧栏社交链接的修改包含两个部分，第一是链接，第二是链接图标，两者配置均在 <strong>主题配置文件</strong> 中，配置步骤如下：</p>
<ol>
<li><p>链接放置在 social 字段下，一行一个链接。其键值格式是 <strong>显示文本: 链接地址</strong></p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Social links</span></div><div class="line"><span class="attr">social:</span></div><div class="line"><span class="attr">  GitHub:</span> https://github.com/your-user-name</div><div class="line"><span class="attr">  Twitter:</span> https://twitter.com/your-user-name</div><div class="line">  微博: http://weibo.com/your-user-name</div><div class="line">  豆瓣: http://douban.com/people/your-user-name</div><div class="line">  知乎: http://www.zhihu.com/people/your-user-name</div><div class="line">  <span class="comment"># 等等</span></div></pre></td></tr></table></figure>
</li>
<li><p>设定链接的图标，对应的字段是 social_icons。其键值格式是 <strong>匹配键: Font Awesome 图标名称</strong>， 匹配键 与上一步所配置的链接的 显示文本 相同（大小写严格匹配），图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀）。 enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Social Icons</span></div><div class="line"><span class="attr">social_icons:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line">  <span class="comment"># Icon Mappings</span></div><div class="line"><span class="attr">  GitHub:</span> github</div><div class="line"><span class="attr">  Twitter:</span> twitter</div><div class="line">  微博: weibo</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h3><p>编辑<strong>主题配置文件</strong>添加如下代码：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># title</span></div><div class="line"><span class="attr">links_title:</span> Links</div><div class="line"><span class="attr">links:</span></div><div class="line"><span class="attr">  MacTalk:</span> http://macshuo.com/</div><div class="line"><span class="attr">  Title:</span> http://example.com/</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用hexo搭建静态博客]]></title>
      <url>http://superleehome.oschina.io/2016/10/18/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>本文是介绍如何使用hexo建立个人静态博客网站，并发布到github page页面上，通过github.io域名进行访问。博主在参考网上诸多资料和官方博客后，加上自己在建站时躺过的一些坑,整理成如下文字，并配上详细截图，如果文字表述不清，看官可以自学参考图片内容或面向Google建站，或在下方评论留言，谢绝恶意评论。<br>注：博主的博客本地地址在d:\hexo下，所以以下文字中介绍的大部分路径以d:\hexo开头</p>
<a id="more"></a>
<h3 id="（一）搭建环境依赖"><a href="#（一）搭建环境依赖" class="headerlink" title="（一）搭建环境依赖"></a>（一）搭建环境依赖</h3><p>使用github.io可以搭建一个自己的博客,把静态文件项目托管到github上,可以写博客,可以使用markdown语法,也可以展示作品,灵活性高,通过hexo工具，可以很方便快捷的建立个人博客网站</p>
<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><ol>
<li>node环境</li>
<li>git</li>
</ol>
<h4 id="环境准备步骤"><a href="#环境准备步骤" class="headerlink" title="环境准备步骤"></a>环境准备步骤</h4><ol>
<li>安装node和git，注册好github账号。(国内由于安全网路的原因，可能网速比较慢，可以考虑将博客网站搭建到oschina上)</li>
<li><p>在代码仓库创建博客仓库</p>
<ul>
<li><p>新建仓库，在右上角的加号点击一下，选择New Repositoty<br>仓库的命名规则为 <em>用户名.github.io</em><br>注意：仓库的用户名部分必须与github的用户名一致，并且不能有大写字母</p>
<p><img src="/upload/hexo_blog/1.png" alt="新建仓库"><br><img src="/upload/hexo_blog/2.png" alt="命名"></p>
</li>
<li><p>生成博客网站测试页面<br>进入刚才创建的仓库,点击右边菜单中的Settings按钮，在跳转到的页面 Update your site<br>对应处点击“Automatic page generator”按钮，这样就有了一个github自动生成的页面<br>来测试的时候使用。之后点击继续。<br><img src="/upload/hexo_blog/3.png" alt="设置页面"><br><img src="/upload/hexo_blog/4.png" alt="生成博客"></p>
</li>
<li>完成博客网站发布<br>再次回到仓库,点击Settings按钮<br>点击链接就可以看到测试地址页面.<br><img src="/upload/hexo_blog/5.png" alt="完成博客"></li>
</ul>
</li>
<li><p>安装hexo<br>在命令行里执行 ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div></pre></td></tr></table></figure>
</li>
<li><p>创建hexo文件夹：<br>在本地找一个喜欢的路径，创建hexo文件夹，比如，我的安装路径在 D:\hexo 下<br>进入到该文件夹下，执行 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure>
<p>命令,hexo工具会自动安装需要的文件，然后将该目录路径初始化为博客根文件夹</p>
</li>
<li><p>安装依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo install</div></pre></td></tr></table></figure>
<p>安装好所有的依赖</p>
</li>
<li><p>完成本地安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate</div></pre></td></tr></table></figure>
<p>编译生成博客文件夹</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure>
<p>启动本地服务器<br>在浏览器中输入 localhost:4000 , 就可以查看最终生成的博客框架了<br><img src="/upload/hexo_blog/6.png" alt="博客目录结构"></p>
</li>
<li><p>配置 _config.yml 文件并发布</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line">	type: git</div><div class="line">	repository: https://github.com/Superlee2013/superlee2013.github.io.git </div><div class="line">	branch: master</div></pre></td></tr></table></figure>
<p>配置完后，还需要执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<p>执行完以后,如果报错 Error: Deployer not found : github,则执行如下命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="（二）发布一篇博客"><a href="#（二）发布一篇博客" class="headerlink" title="（二）发布一篇博客"></a>（二）发布一篇博客</h3><h4 id="配置整站"><a href="#配置整站" class="headerlink" title="配置整站"></a>配置整站</h4><p>打开hexo目录下的_config.yml文件,做如下配置,如果没有写到的,那就是保持默认:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Hexo Configuration</span></div><div class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></div><div class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></div><div class="line"></div><div class="line"><span class="comment"># Site</span></div><div class="line"><span class="attr">title:</span> Superlee<span class="string">'s blog                             # 设置header里的title</span></div><div class="line">subtitle: 时光且行                                 # 副标题</div><div class="line">description: 青春都一饷，且把浮生，换了代码轻狂~   # 描述</div><div class="line">author: Superlee                                   # 博主名称</div><div class="line">email: superlee4life@foxmail.com                   # 邮箱</div><div class="line">language: zh-Hans                                  # 设置中文</div><div class="line">timezone:</div><div class="line"></div><div class="line"># URL</div><div class="line">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child<span class="string">' and root as '</span>/child/<span class="string">'</span></div><div class="line">url: http://superleehome.oschina.io              # 博客地址</div><div class="line">root: /</div><div class="line">permalink: :year/:month/:day/:title/</div><div class="line">permalink_defaults:</div><div class="line"></div><div class="line"># Directory</div><div class="line">source_dir: source</div><div class="line">public_dir: public</div><div class="line">tag_dir: tags</div><div class="line">archive_dir: archives</div><div class="line">category_dir: categories</div><div class="line">code_dir: downloads/code</div><div class="line">i18n_dir: :lang</div><div class="line">skip_render:</div><div class="line"></div><div class="line"># avatar</div><div class="line">avatar: /images/avatar.jpg                      # 设置头像</div><div class="line"></div><div class="line"># Writing</div><div class="line">new_post_name: :title.md # File name of new posts</div><div class="line">default_layout: post</div><div class="line">titlecase: false # Transform title into titlecase</div><div class="line">external_link: true # Open external links in new tab</div><div class="line">filename_case: 0</div><div class="line">render_drafts: false</div><div class="line">post_asset_folder: false</div><div class="line">relative_link: false</div><div class="line">future: true</div><div class="line">highlight:</div><div class="line">  enable: true</div><div class="line">  line_number: true</div><div class="line">  auto_detect: false</div><div class="line">  tab_replace:</div><div class="line"></div><div class="line"># Category &amp; Tag</div><div class="line">default_category: uncategorized</div><div class="line">category_map:</div><div class="line">tag_map:</div><div class="line"></div><div class="line"># Date / Time format</div><div class="line">## Hexo uses Moment.js to parse and display date</div><div class="line">## You can customize the date format as defined in</div><div class="line">## http://momentjs.com/docs/#/displaying/format/</div><div class="line">date_format: YYYY-MM-DD</div><div class="line">time_format: HH:mm:ss</div><div class="line"></div><div class="line"># Pagination</div><div class="line">## Set per_page to 0 to disable pagination</div><div class="line">per_page: 10                                   # 设置每页显示多少篇文章 </div><div class="line">pagination_dir: page </div><div class="line"></div><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: next                                    # 配置主题模板，暂时不需要改，之后会修改模板</div><div class="line"></div><div class="line">#Deployment</div><div class="line">##Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https://git.oschina.net/superleeHome/superleeHome.git   # 仓库地址</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<h4 id="添加新文章"><a href="#添加新文章" class="headerlink" title="添加新文章"></a>添加新文章</h4><p>在hexo所在文件夹下，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;my new post&quot;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：这里的”my new post”是作为新博客的文件名，要有引号</p>
</blockquote>
<p>然后在 d:\hexo\source_posts\下面找到这篇名为”my new post.md”的文件，在编辑器里打开，进行如下配置<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> <span class="string">"my new post"</span>                   <span class="comment">#可以随意修改，可以是中文</span></div><div class="line"><span class="attr">date:</span> <span class="number">2016</span><span class="bullet">-07</span><span class="bullet">-30</span> <span class="number">09</span>:<span class="number">00</span>:<span class="number">00</span>              <span class="comment">#创建的时间，一般不作修改</span></div><div class="line"><span class="attr">tags:</span> [<span class="string">'前端'</span>]                         <span class="comment">#文章的tag标签，多个标签用逗号隔开</span></div><div class="line"><span class="attr">categories:</span> blog                       <span class="comment">#文章分类 </span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="comment">#这里开始使用markdown语法书写文章内容</span></div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate</div></pre></td></tr></table></figure>
<p>编译生成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure></p>
<p>在本地预览<br>预览没有问题后，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy</div></pre></td></tr></table></figure></p>
<p>发布到github</p>
<h3 id="（三）更换主题"><a href="#（三）更换主题" class="headerlink" title="（三）更换主题"></a>（三）更换主题</h3><p>我们这里以hexo主题为例</p>
<h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd your-hexo-site</div><div class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<h4 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h4><p>打开_config.yml做如下修改：</p>
<blockquote>
<p>theme: next</p>
</blockquote>
<h4 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h4><p>git bash 进入D:\hexo\themes\next<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull</div></pre></td></tr></table></figure></p>
<h4 id="测试推送"><a href="#测试推送" class="headerlink" title="测试推送"></a>测试推送</h4><p>回到D:\hexo,执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure>
<p>打开 localhost:4000 预览</p>
<h4 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h4><p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：</p>
<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>
<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>
</ul>
<p>打开D:\hexo\themes\next下_config.yml，找到schme，进行选择<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Schemes</span></div><div class="line"><span class="comment">#scheme: Muse</span></div><div class="line"><span class="attr">scheme:</span> Mist</div><div class="line"><span class="comment">#scheme: Pisces</span></div></pre></td></tr></table></figure></p>
<h4 id="设置主题菜单"><a href="#设置主题菜单" class="headerlink" title="设置主题菜单"></a>设置主题菜单</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)</span></div><div class="line"><span class="attr">menu:</span></div><div class="line"><span class="attr">  home:</span> /</div><div class="line"><span class="attr">  archives:</span> /archives</div><div class="line"><span class="attr">  categories:</span> /categories</div><div class="line"><span class="attr">  tags:</span> /tags</div><div class="line"><span class="attr">  about:</span> /about</div><div class="line">  <span class="comment">#commonweal: /404.html</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Enable/Disable menu icons.</span></div><div class="line"><span class="comment"># Icon Mapping:</span></div><div class="line"><span class="comment">#   Map a menu item to a specific FontAwesome icon name.</span></div><div class="line"><span class="comment">#   Key is the name of menu item and value is the name of FontAwsome icon. Key is case-senstive.</span></div><div class="line"><span class="comment">#   When an question mask icon presenting up means that the item has no mapping icon.</span></div><div class="line"><span class="attr">menu_icons:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line">  <span class="comment">#KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</span></div><div class="line"><span class="attr">  home:</span> home</div><div class="line"><span class="attr">  about:</span> user</div><div class="line"><span class="attr">  categories:</span> th</div><div class="line"><span class="attr">  tags:</span> tags</div><div class="line"><span class="attr">  archives:</span> archive</div><div class="line"><span class="attr">  commonweal:</span> heartbeat</div></pre></td></tr></table></figure>
<h4 id="发布主题"><a href="#发布主题" class="headerlink" title="发布主题"></a>发布主题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<p>发布到个人博客网站</p>
<blockquote>
<p>关于next主题配置相关文档，请参考<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT使用文档</a>，或移步博主下篇博文<a href="http://superleehome.oschina.io/2016/10/20/NexT%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/">NexT主题配置</a></p>
</blockquote>
<p>END</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[LeetCode]Find Minimum in Rotated Sorted Array II]]></title>
      <url>http://superleehome.oschina.io/2016/08/09/LeetCode-Find-Minimum-in-Rotated-Sorted-Array-II/</url>
      <content type="html"><![CDATA[<pre><code>Tags:Array,Binary Search
</code></pre><a id="more"></a>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/" target="_blank" rel="external">题目描述</a></h2><blockquote>
<p><strong><em>Follow up for “Find Minimum in Rotated Sorted Array”</em>:<br>What if duplicates are allowed?<br>Would this affect the run-time complexity? How and why?<br>Given an integer, write a function to determine if it is a power of two.</strong></p>
</blockquote>
<p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.<br>(i.e., <em>0 1 2 4 5 6 7</em> might become <em>4 5 6 7 0 1 2</em>).<br>Find the minimum element.<br>The array may contain duplicates.</p>
<blockquote>
<p>Tags:Array,Binary Search</p>
</blockquote>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMin</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums.length==<span class="number">2</span>)&#123;</div><div class="line">            <span class="keyword">return</span> Math.min(nums[<span class="number">0</span>],nums[<span class="number">1</span>]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> binarySearch(nums);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> l=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> r=nums.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</div><div class="line">            <span class="keyword">int</span> m=l+(r-l)/<span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span>(nums[m]&gt;nums[r])&#123;</div><div class="line">                l=m+<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[m]&lt;nums[r])&#123;</div><div class="line">                r=m;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                r=r-<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> nums[r];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[LeetCode]Power of Two]]></title>
      <url>http://superleehome.oschina.io/2016/08/08/LeetCode-Power-of-Two/</url>
      <content type="html"><![CDATA[<pre><code>Tags:Math,Bit Manipulation
</code></pre><a id="more"></a>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/power-of-two/" target="_blank" rel="external">题目描述</a></h2><p>Given an integer, write a function to determine if it is a power of two.<br><strong>Example:</strong><br>Given s = “hello”, return “olleh”.</p>
<blockquote>
<p>Tags:Math,Bit Manipulation</p>
</blockquote>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道算法题是分析一个给定的数是否为2的幂。<br>使用位运算能很快解决这道题，假如给出的数为n</p>
<ul>
<li>当n是2的幂时，如n=4,转换为2进制为100,n-1时正好每一位都取反，为011，进行与运算得到的数为0；</li>
<li>当n不是2的幂，如n=5,转换为2进制为101，减1为100,与运算不为0。</li>
</ul>
<p>综上所述,判断n&amp;(n-1)是否为0,即可解决<br>这里有一个坑，就是并没有说明给出的数一定为正数，所以，我们需要判断是否大于0;</p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (n&gt;<span class="number">0</span>)&amp;&amp;((n&amp;(n<span class="number">-1</span>))==<span class="number">0</span>?<span class="literal">true</span>:<span class="literal">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @param &#123;number&#125; n</div><div class="line"> * @return &#123;boolean&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> isPowerOfTwo = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (n&gt;<span class="number">0</span>)&amp;&amp;((n&amp;(n<span class="number">-1</span>))===<span class="number">0</span>?<span class="literal">true</span>:<span class="literal">false</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>使用C的运行时间为4ms，JavaScript为164ms,数据结果不作过多分析 :),读者自行yy~</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[LeetCode]Reverse String]]></title>
      <url>http://superleehome.oschina.io/2016/08/08/LeetCode-Reverse-String/</url>
      <content type="html"><![CDATA[<pre><code>Tags:Two Pointers,String
</code></pre><a id="more"></a>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a><a href="https://leetcode.com/problems/reverse-string/" target="_blank" rel="external">题目描述</a></h2><p>Write a function that takes a string as input and returns the string reversed.<br><strong>Example:</strong><br>Given s = “hello”, return “olleh”.</p>
<blockquote>
<p>Tags:Two Pointers,String</p>
</blockquote>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道算法题是leetcode上的第一道算法题，非常简单.<br>然而，可能水平不够，博主在使用栈方式的时候，报超时错误 :( ,所以比较无耻的调用库函数解决了<br>tag里给出的是使用双指针，有兴趣的读者可以试试</p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseString</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringBuilder(s).reverse().toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">reverseString</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        reverse(s.begin(),s.end());</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>不调用库函数时的C++解决方案如下:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="built_in">string</span> &amp; s,<span class="keyword">int</span> pos1,<span class="keyword">int</span> pos2)</span></span>&#123;</div><div class="line">        <span class="comment">// s[pos1]^=s[pos2]^=s[pos1];</span></div><div class="line">        <span class="keyword">char</span> temp=s[pos1];</div><div class="line">        s[pos1]=s[pos2];</div><div class="line">        s[pos2]=temp;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">reverseString</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count=s.size();</div><div class="line">        <span class="keyword">int</span> halfPos=count/<span class="number">2</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;halfPos;i++)&#123;</div><div class="line">            swap(s,i,count-i<span class="number">-1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Angular图片裁剪1--本地图片读取及显示]]></title>
      <url>http://superleehome.oschina.io/2016/07/31/Angular%E5%9B%BE%E7%89%87%E8%A3%81%E5%89%AA1--%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E8%AF%BB%E5%8F%96%E5%8F%8A%E6%98%BE%E7%A4%BA/</url>
      <content type="html"><![CDATA[<p>本文的内容是博主在封装一个angular的图片裁剪工具时的一些心得和体验，记录下来，方便之后回顾。<br>所涉及到的angular的技术：指令封装、指令依赖、H5资源接口FileReader</p>
<a id="more"></a>
<h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><p>点击按钮或div(按钮样式可自定义),跳出选取文件框，选取图片资源文件后，在模态对话框上进行图片处理，保存时在页面显示处理后图片内容。<br>效果显示图如下：<br><img src="/upload/clipImg1.gif" alt="效果图"></p>
<blockquote>
<p>本文暂未设计图片处理部分，关于图片处理，请参考下一篇文章</p>
</blockquote>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><blockquote>
<h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4></blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">ng-app</span>=<span class="string">"MyApp"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"directives.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"bootstrap.min.css"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">		.preAreaShow&#123;</div><div class="line">			display: block;</div><div class="line">			background-color: rgba(0, 0, 0, 0.5);</div><div class="line">		&#125;</div><div class="line">		.preAreaHide&#123;</div><div class="line">			display: none;</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"ImgCtrl"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">img-upload-btn</span> <span class="attr">post-img</span>=<span class="string">"myImage"</span> <span class="attr">result-img</span>=<span class="string">"resultImg"</span>&gt;</span></div><div class="line">		    添加图片</div><div class="line">		<span class="tag">&lt;/<span class="name">img-upload-btn</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-top:30px;"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">ng-src</span>=<span class="string">"&#123;&#123;resultImg&#125;&#125;"</span> <span class="attr">style</span>=<span class="string">"max-width: 210px;"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>img-upload-btn标签是最终封装好的标签，post-img是选择的图片，result-img是最终生成的图片(经过裁剪等操作)<br>div&gt;img 为预览区域，展示处理完后的图片。</p>
<blockquote>
<h4 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h4></blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'MyApp'</span>, []);</div><div class="line"></div><div class="line">myApp.controller(<span class="string">'ImgCtrl'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line"></div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<blockquote>
<h4 id="directives-js"><a href="#directives-js" class="headerlink" title="directives.js"></a>directives.js</h4></blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myApp=angular.module(<span class="string">'MyApp'</span>);</div><div class="line"></div><div class="line">myApp.directive(<span class="string">'imgUploadBtn'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span>&#123;</div><div class="line">        <span class="attr">restrict</span>:<span class="string">'E'</span>,</div><div class="line">        <span class="attr">transclude</span>:<span class="literal">true</span>,</div><div class="line">        <span class="attr">scope</span>:&#123;</div><div class="line">            <span class="attr">postImg</span>:<span class="string">'='</span>,</div><div class="line">            <span class="attr">resultImg</span>:<span class="string">'='</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">controller</span>:<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">        	$scope.preImgShow=<span class="literal">false</span>;</div><div class="line">        	<span class="keyword">this</span>.hidePreImgArea=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        		$scope.preImgShow=<span class="literal">false</span>;</div><div class="line">        	&#125;;</div><div class="line">        	<span class="keyword">this</span>.showPreImgArea=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        		$scope.preImgShow=<span class="literal">true</span>;</div><div class="line">        	&#125;;</div><div class="line">        	<span class="keyword">this</span>.saveImg=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        		<span class="comment">//<span class="doctag">TODO:</span> 处理裁剪后的图片逻辑</span></div><div class="line">        		$scope.resultImg=$scope.postImg;</div><div class="line">        		$scope.preImgShow=<span class="literal">false</span>;</div><div class="line">        	&#125;;</div><div class="line">        	$scope.hidePreImgArea=<span class="keyword">this</span>.hidePreImgArea;</div><div class="line">        	$scope.saveImg=<span class="keyword">this</span>.saveImg;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">templateUrl</span>:<span class="string">'tplPreviewImg.html'</span></div><div class="line">    &#125;</div><div class="line">&#125;).directive(<span class="string">"fileread"</span>, [<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span>:<span class="string">'A'</span>,</div><div class="line">        <span class="attr">require</span>:<span class="string">'^imgUploadBtn'</span>,</div><div class="line">        <span class="attr">scope</span>: &#123;</div><div class="line">            <span class="attr">fileread</span>: <span class="string">"="</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">link</span>: <span class="function"><span class="keyword">function</span> (<span class="params">scope, element, attributes,imgUploadBtnCtrl</span>) </span>&#123;</div><div class="line">            element.bind(<span class="string">"change"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> file=evt.currentTarget.files[<span class="number">0</span>];</div><div class="line">                <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</div><div class="line">                reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</div><div class="line">                    scope.$apply(<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">                        scope.fileread=evt.target.result;</div><div class="line">                    &#125;);</div><div class="line">                &#125;;</div><div class="line">                reader.readAsDataURL(file);</div><div class="line">                imgUploadBtnCtrl.showPreImgArea();</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;]).directive(<span class="string">'imgBtn'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span>&#123;</div><div class="line">		<span class="attr">restrict</span>:<span class="string">'A'</span>,</div><div class="line">		<span class="attr">link</span>:<span class="function"><span class="keyword">function</span>(<span class="params">scope,element,attr</span>)</span>&#123;</div><div class="line">			element.bind(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            	<span class="comment">//查找input文件选择框</span></div><div class="line">                <span class="built_in">document</span>.getElementById(<span class="string">'imgFile'</span>).click();</div><div class="line">            &#125;);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里我们封装了3个指令，相关作用及介绍如下：</p>
<ul>
<li>imgUploadBtn:我们最终在html页面上调用的指令（html页面上标签使用中划线方式使用，指令里需要使用驼峰标识）<ul>
<li>restrict:指令标识，E标识该指令为一个dom元素element,其他的还有A(attribute,属性),C(class，类),M(注释),后两者不常用。这些标识也可以结合使用，如’AE’,’AECM’等;</li>
<li>transclude:定义是否将当前元素的内容转移到模板中,并使用ng-transclude指令,用来告诉指令把内容转移到的位置比如我们在页面的自定义标签里写了“添加图片”，然后在button按钮上使用ng-transclude，那么button就会写上”添加图片”;</li>
<li>scope:定义该指令作用域，我们使用的是{}，表示新建一个作用域，里面引用了父作用域的两个变量（ps:关于angular作用域相关内容，请期待下一篇博客）</li>
<li>controller:该指令的控制器，里面为当前作用域定义了一个变量preImgShow，和两个函数hidePreImgArea、saveImg，并使用this暴露三个公共接口，以方便继承它的指令使用;</li>
<li>templateUrl:模版url地址</li>
</ul>
</li>
<li>fileread:读取本地图片相关方法，依赖上面的imgUploadBtn，指令里的内容介绍如下(与上面重复的不再赘述)<ul>
<li>require:指令依赖，^imgUploadBtn 表示从父节点上寻找imgUploadBtn指令，并添加到该当前fileread指令依赖中，即注入到link函数第四个参数ctrl中。另外还可以使用前缀?,此前缀将告诉$compile服务，如果所需的controller没找到，不要抛出异常.<br>关于指令通信的相关知识点，请期待下一篇文章</li>
<li>link:以编程的方式操作DOM，包括添加监听器、进行双向数据绑定等操作,负责在模型和数据之间进行数据关联，与compile区别是compile是以编程的方式修改DOM模板的副本。关于link和compile详细内容，请期待下一篇博客</li>
</ul>
</li>
<li>imgBtn：监听按钮点击事件，当按钮点击时，我们调用input文件选择框的click方法，即可选择文件。相当于我们将选择文件的input的点击事件委托给了按钮，这样我们就能自己设计好看的样式而不必使用原生input(type=’file’)的样式。</li>
</ul>
<blockquote>
<h4 id="tplPreviewImg-html"><a href="#tplPreviewImg-html" class="headerlink" title="tplPreviewImg.html"></a>tplPreviewImg.html</h4></blockquote>
<p>按钮、input选择框、模态预览框相关html内容<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">btn</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span> <span class="attr">id</span>=<span class="string">"uploadBtn"</span> <span class="attr">ng-transclude</span> <span class="attr">img-btn</span>&gt;</span><span class="tag">&lt;/<span class="name">btn</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">fileread</span>=<span class="string">"postImg"</span> <span class="attr">pre-img-show</span>=<span class="string">"&#123;&#123;preImgShow&#125;&#125;"</span>  <span class="attr">id</span>=<span class="string">"imgFile"</span> <span class="attr">accept</span>=<span class="string">"image/gif,image/jpeg,image/png"</span> <span class="attr">style</span>=<span class="string">"display:none"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal"</span> <span class="attr">ng-class</span>=<span class="string">"&#123;true:'preAreaShow',false:'preAreaHide'&#125;[preImgShow||false]"</span> <span class="attr">onselectstart</span>=<span class="string">"return false"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span>&gt;</span>图片预览<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">ng-src</span>=<span class="string">"&#123;&#123;postImg&#125;&#125;"</span> <span class="attr">result-img</span>=<span class="string">"&#123;&#123;resultImg&#125;&#125;"</span> <span class="attr">style</span>=<span class="string">"max-width:500px;max-height:300px;margin:0 auto;display:block;"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">ng-click</span>=<span class="string">"hidePreImgArea()"</span>&gt;</span>放弃<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">ng-click</span>=<span class="string">"saveImg()"</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>以上就是关于angular图片选择及预览的相关内容，下一节我们将继续讨论如何进行图片的裁剪及保存</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS浮动知识整理]]></title>
      <url>http://superleehome.oschina.io/2016/07/30/CSS%E6%B5%AE%E5%8A%A8%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p>说明:本文原载<a href="http://www.cnblogs.com/iyangyuan/archive/2013/03/27/2983813.html" target="_blank" rel="external">经验分享：CSS浮动(float,clear)通俗讲解</a>，博主只是稍作整理^_^</p>
</blockquote>
<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>由于CSS内容比较多，本文只能有针对性的讲解。如果读者理解CSS盒子模型，但对于浮动不理解，那么这篇文章可以帮助你。本文仅仅是入门教程，不当之处请谅解！本文以div元素布局为例。</p>
<a id="more"></a>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="浮动的意义"><a href="#浮动的意义" class="headerlink" title="浮动的意义"></a>浮动的意义</h3><p>首先要知道，div是块级元素，在页面中独占一行，自上而下排列，也就是传说中的流。如下图：<br><img src="http://images.cnitblog.com/blog/471788/201303/27004951-2cdc11e4340c484ab8a7eb8f515a683e.png" alt="效果图"><br>可以看出，即使div1的宽度很小，页面中一行可以容下div1和div2，div2也不会排在div1后边，因为div元素是独占一行的。<br>注意，以上这些理论，是指标准流中的div。<br>小编认为，无论多么复杂的布局，其基本出发点均是：<strong>“如何在一行显示多个div元素”</strong>。<br>显然标准流已经无法满足需求，这就要用到浮动。</p>
<h3 id="如何使用浮动"><a href="#如何使用浮动" class="headerlink" title="如何使用浮动"></a>如何使用浮动</h3><p><strong>浮动可以理解为让某个div元素脱离标准流，漂浮在标准流之上，和标准流不是一个层次。</strong><br>例如，假设上图中的div2浮动，那么它将脱离标准流，但div1、div3、div4仍然在标准流当中，所以div3会自动向上移动，占据div2的位置，重新组成一个流。如图：<br><img src="http://images.cnitblog.com/blog/471788/201303/27005043-61e7e3050eb3466d99f25b10f449daa3.png" alt="效果图"><br>从图中可以看出，由于对div2设置浮动，因此它不再属于标准流，div3自动上移顶替div2的位置，div1、div3、div4依次排列，成为一个新的流。又因为浮动是漂浮在标准流之上的，因此div2挡住了一部分div3，div3看起来变“矮”了。<br>这里div2用的是左浮动(float:left;)，可以理解为漂浮起来后靠左排列，右浮动(float:right;)当然就是靠右排列。这里的靠左、靠右是说页面的左、右边缘。<br>如果我们把div2采用右浮动，会是如下效果：<br><img src="http://images.cnitblog.com/blog/471788/201303/27005121-3bfe4640443c4cd19c850857cc1ce39b.png" alt="效果图"><br>此时div2靠页面右边缘排列，不再遮挡div3，读者可以清晰的看到上面所讲的div1、div3、div4组成的流。<br>目前为止我们只浮动了一个div元素，多个呢？<br>下面我们把div2和div3都加上左浮动，效果如图：<br><img src="http://images.cnitblog.com/blog/471788/201303/27005158-1b23072329b04449a4438af06cbb8387.png" alt="效果图"><br>同理，由于div2、div3浮动，它们不再属于标准流，因此div4会自动上移，与div1组成一个“新”标准流，而浮动是漂浮在标准流之上，因此div2又挡住了div4。</p>
<h3 id="重点来了"><a href="#重点来了" class="headerlink" title="重点来了"></a>重点来了</h3><p>咳咳，到重点了，当同时对div2、div3设置浮动之后，div3会跟随在div2之后，不知道读者有没有发现，一直到现在，div2在每个例子中都是浮动的，但并没有跟随到div1之后。因此，我们可以得出一个重要结论：</p>
<pre><code>假如某个div元素A是浮动的，如果A元素上一个元素也是浮动的，那么A元素会跟随在上一个元素的后边
(如果一行放不下这两个元素，那么A元素会被挤到下一行)；
如果A元素上一个元素是标准流中的元素，那么A的相对垂直位置不会改变，
也就是说A的顶部总是和上一个元素的底部对齐。
div的顺序是HTML代码中div的顺序决定的。
靠近页面边缘的一端是前，远离页面边缘的一端是后。
</code></pre><p>如图：<br><img src="http://images.cnitblog.com/blog/471788/201303/27005253-004f304d2c6e424d81e7658e26d3f8a3.png" alt="效果图"><br>为了帮助读者理解，再举几个例子。<br>假如我们把div2、div3、div4都设置成左浮动，效果如下：<br><img src="http://images.cnitblog.com/blog/471788/201303/27005331-95ad1122cc5641a3a3701e6c7fb775e0.png" alt="效果图"><br>根据上边的结论，跟着小菜理解一遍：先从div4开始分析，它发现上边的元素div3是浮动的，所以div4会跟随在div3之后；div3发现上边的元素div2也是浮动的，所以div3会跟随在div2之后；而div2发现上边的元素div1是标准流中的元素，因此div2的相对垂直位置不变，顶部仍然和div1元素的底部对齐。由于是左浮动，左边靠近页面边缘，所以左边是前，因此div2在最左边。<br>假如把div2、div3、div4都设置成右浮动，效果如下：<br><img src="http://images.cnitblog.com/blog/471788/201303/27005405-331c3a369d5c4bfb8692c40ac3e59bf9.png" alt="效果图"><br>道理和左浮动基本一样，只不过需要注意一下前后对应关系。由于是右浮动，因此右边靠近页面边缘，所以右边是前，因此div2在最右边。<br>假如我们把div2、div4左浮动，效果图如下：<br><img src="http://images.cnitblog.com/blog/471788/201303/27005436-fc787817a4d84c1590684b0b53d92267.png" alt="效果图"><br>依然是根据结论，div2、div4浮动，脱离了标准流，因此div3将会自动上移，与div1组成标准流。div2发现上一个元素div1是标准流中的元素，因此div2相对垂直位置不变，与div1底部对齐。div4发现上一个元素div3是标准流中的元素，因此div4的顶部和div3的底部对齐，并且总是成立的，因为从图中可以看出，div3上移后，div4也跟着上移，<strong>div4总是保证自己的顶部和上一个元素div3(标准流中的元素)的底部对齐</strong>。<br>至此，恭喜读者已经掌握了添加浮动，但还有清除浮动，有上边的基础清除浮动非常容易理解。</p>
<h3 id="如何清除浮动"><a href="#如何清除浮动" class="headerlink" title="如何清除浮动"></a>如何清除浮动</h3><p>经过上边的知识整理，可以看出：元素浮动之前，也就是在标准流中，是竖向排列的，而浮动之后可以理解为横向排列。<br><strong>清除浮动可以理解为打破横向排列。</strong><br>清除浮动的关键字是clear，官方定义如下：</p>
<blockquote>
<p>语法：<br>clear: none | left | right | both<br>取值：<br>none:默认值。允许两边都可以有浮动对象<br>left:不允许左边有浮动对象<br>right:不允许右边有浮动对象<br>both:不允许有浮动对象</p>
</blockquote>
<p>定义非常容易理解，但是读者实际使用时可能会发现不是这么回事。<br>定义没有错，只不过它描述的太模糊，让我们不知所措。<br>根据上边的基础，假如页面中只有两个元素div1、div2，它们都是左浮动，场景如下：<br><img src="http://images.cnitblog.com/blog/471788/201303/27005535-a73c3a18ef8b432496fbaa26b532d9da.png" alt="效果图"><br>此时div1、div2都浮动，根据规则，div2会跟随在div1后边，但我们仍然希望div2能排列在div1下边，就像div1没有浮动，div2左浮动那样。<br>这时候就要用到清除浮动（clear），如果单纯根据官方定义，读者可能会尝试这样写：在div1的CSS样式中添加clear:right;，理解为不允许div1的右边有浮动元素，由于div2是浮动元素，因此会自动下移一行来满足规则。<br>其实这种理解是不正确的，这样做没有任何效果。看小菜定论：</p>
<pre><code>对于CSS的清除浮动(clear)，一定要牢记：这个规则只能影响使用清除的元素本身，不能影响其他元素。
</code></pre><p>怎么理解呢？就拿上边的例子来说，我们是想让div2移动，但我们却是在div1元素的CSS样式中使用了清除浮动，试图通过清除div1右边的浮动元素(clear:right;)来强迫div2下移，这是不可行的，因为这个清除浮动是在div1中调用的，它只能影响div1，不能影响div2。<br>根据小编定论，要想让div2下移，就必须在div2的CSS样式中使用浮动。本例中div2的左边有浮动元素div1，因此只要在div2的CSS样式中使用clear:left;来指定div2元素左边不允许出现浮动元素，这样div2就被迫下移一行。<br><img src="http://images.cnitblog.com/blog/471788/201303/27005603-199c35bf7d07478599bf355e3fb8aecf.png" alt="效果图"><br>那么假如页面中只有两个元素div1、div2，它们都是右浮动呢？读者此时应该已经能自己推测场景，如下：<br><img src="http://images.cnitblog.com/blog/471788/201303/27005626-2408e35fd5f74faa92e46df37c04974d.png" alt="效果图"><br>此时如果要让div2下移到div1下边，要如何做呢？<br>同样根据小菜定论，我们希望移动的是div2，就必须在div2的CSS样式中调用浮动，因为浮动只能影响调用它的元素。<br>可以看出div2的右边有一个浮动元素div1，那么我们可以在div2的CSS样式中使用clear:right;来指定div2的右边不允许出现浮动元素，这样div2就被迫下移一行，排到div1下边。<br><img src="http://images.cnitblog.com/blog/471788/201303/27005712-4f0ff1cbbd30482694190d93834bd570.png" alt="效果图"><br>至此，读者已经掌握了CSS+DIV浮动定位基本原理，足以应付常见的布局。<br>其实，万变不离其宗，只要读者用心体会，再复杂的布局都可以通过小菜总结的规律搞定。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[层布局模型]]></title>
      <url>http://superleehome.oschina.io/2016/07/26/%E5%B1%82%E5%B8%83%E5%B1%80%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h2 id="什么是层模型？"><a href="#什么是层模型？" class="headerlink" title="什么是层模型？"></a>什么是层模型？</h2><p>什么是层布局模型？层布局模型就像是图像软件PhotoShop中非常流行的图层编辑功能一样，每个图层能够精确定位操作，但在网页设计领域，由于网页大小的活动性，层布局没能受到热捧。但是在网页上局部使用层布局还是有其方便之处的。下面我们来学习一下html中的层布局。<br>如何让html元素在网页中精确定位，就像图像软件PhotoShop中的图层一样可以对每个图层能够精确定位操作。CSS定义了一组定位（positioning）属性来支持层布局模型。</p>
<p>层模型有三种形式：</p>
<ul>
<li>绝对定位(position: absolute)</li>
<li>相对定位(position: relative)</li>
<li>固定定位(position: fixed)</li>
</ul>
<h3 id="1-层模型–绝对定位"><a href="#1-层模型–绝对定位" class="headerlink" title="1.层模型–绝对定位"></a>1.层模型–绝对定位</h3><p>如果想为元素设置层模型中的绝对定位，需要设置position:absolute(表示绝对定位)，这条语句的作用将元素从文档流中拖出来，然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口。</p>
<pre><code>但不是可视区域，注意body高度与可视区域高度的区别
</code></pre><p>如下面代码可以实现div元素相对于浏览器窗口向右移动100px，向下移动50px。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">2px</span> red solid;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">left</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">top</span>:<span class="number">50px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="2-层模型–相对定位"><a href="#2-层模型–相对定位" class="headerlink" title="2.层模型–相对定位"></a>2.层模型–相对定位</h3><p>如果想为元素设置层模型中的相对定位，需要设置position:relative（表示相对定位），它通过left、right、top、bottom属性确定元素在正常文档流中的偏移位置。相对定位完成的过程是首先按static(float)方式生成一个元素(并且元素像层一样浮动了起来)，然后<em>相对于以前的位置移动</em>，移动的方向和幅度由left、right、top、bottom属性确定，偏移前的位置保留不动。<br>如下代码实现相对于以前位置向下移动50px，向右移动100px<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#div1</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">2px</span> red solid;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">    <span class="attribute">left</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">top</span>:<span class="number">50px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<pre><code>什么叫做“偏移前的位置保留不动”呢？
虽然div元素相对于以前的位置产生了偏移，但是div元素以前的位置还是保留着
</code></pre><h3 id="3-层模型–固定定位"><a href="#3-层模型–固定定位" class="headerlink" title="3.层模型–固定定位"></a>3.层模型–固定定位</h3><p>fixed：表示固定定位，与absolute定位类型类似，但它的相对移动的坐标是视图（屏幕内的网页窗口）本身。由于视图本身是固定的，它不会随浏览器窗口的滚动条滚动而变化，除非你在屏幕中移动浏览器窗口的屏幕位置，或改变浏览器窗口的显示大小，因此固定定位的元素会始终位于浏览器窗口内视图的某个位置，不会受文档流动影响，这与background-attachment:fixed;属性功能相同。以下代码可以实现相对于浏览器视图向右移动100px，向下移动50px。并且拖动滚动条时位置固定不变。即它相当于可视区域的地位，即是浏览器窗口在哪，则定位到哪</p>
<pre><code>不管将具有position:fixed属性的放在哪个div或者说元素下，它都是相当于浏览器可视区域来定位的；
</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#div1</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">2px</span> red solid;</div><div class="line">    <span class="attribute">position</span>:fixed;</div><div class="line">    <span class="attribute">left</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">top</span>:<span class="number">50px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="实际使用案例"><a href="#实际使用案例" class="headerlink" title="实际使用案例"></a>实际使用案例</h2><hr>
<p>##Relative与Absolute组合使用<br>    使用position:absolute可以实现被设置元素相对于浏览器（body）设置定位以后，大家有没有想过可不可以相对于其它元素进行定位呢？答案是肯定的，当然可以。使用position:relative来帮忙，但是必须遵守下面规范：<br><strong>1、参照定位的元素必须是相对定位元素的前辈元素：</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span><span class="comment">&lt;!--参照定位的元素--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span>相对参照元素进行定位<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--相对定位元素--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>从上面代码可以看出box1是box2的父元素（父元素当然也是前辈元素了）。</p>
<p><strong>2、参照定位的元素必须加入position:relative;</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#box1</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>3、定位元素加入position:absolute，便可以使用top、bottom、left、right来进行偏移定位了。</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#box2</span>&#123;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">top</span>:<span class="number">20px</span>;</div><div class="line">    <span class="attribute">left</span>:<span class="number">30px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样box2就可以相对于父元素box1定位了（这里注意参照物就可以不是浏览器了，而可以自由设置了）。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于AOP的iOS用户操作引导框架设计]]></title>
      <url>http://superleehome.oschina.io/2016/07/26/%E5%9F%BA%E4%BA%8EAOP%E7%9A%84iOS%E7%94%A8%E6%88%B7%E6%93%8D%E4%BD%9C%E5%BC%95%E5%AF%BC%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>有一种现象，App设计者觉得理所当然的操作方式，却常常被用户所忽视，为了防止这种现象发生，就要为App设计一个帮助，一种低成本的方案是将帮助文档写成HTML然后展示给用户，这样的方式常常不能带来好的效果，一种较好的方式是高亮用户应该点击的区域，对其他部分进行遮盖，并用说明文字提醒用户，如下图所示。<a href="https://raw.githubusercontent.com/Soulghost/SGUserGuide/master/images/guide.gif" target="_blank" rel="external">点击这里观看动画演示</a><br><img src="https://raw.githubusercontent.com/Soulghost/SGUserGuide/master/images/guide.png" alt=""></p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>框架<a href="https://github.com/Soulghost/SGUserGuide" target="_blank" rel="external">SGUserGuide</a>已经上传到github，<a href="https://github.com/Soulghost/SGUserGuide" target="_blank" rel="external">点击前去github下载</a>，欢迎Star！</p>
<h2 id="关键"><a href="#关键" class="headerlink" title="关键"></a>关键</h2><p>要实现这种引导，关键问题有二，一是如何拿到允许交互的控件，二是如何处理引导步骤的推进关系。<br>对于第一个问题，可以通过keyPath解决，keyPath的强大之处在于可以用点语法拿到更深层的私有，例如我们的ViewController有一个私有属性topView，而topView又有私有属性topButton，那么我们使用<code>topView.topButton</code>即可从ViewController中拿到控件topButton而丝毫不破坏其封装性。<br>对于第二个问题，可以通过AOP编程解决。我们知道大部分的交互都涉及页面切换，例如上图点击按钮后进入编辑页面，因此页面的切换可以作为一个“切面”，我们通过这个切面来处理大部分的引导步骤推进。我们可以通过<strong>Method Swizzling</strong>来拦截所有的viewWillAppear:方法，并处理引导步骤的判断与推进，需要注意的是还有一些不涉及页面切换的引导步骤，则需要在适当的地方手动推进。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="描述用户引导步骤的类的设计"><a href="#描述用户引导步骤的类的设计" class="headerlink" title="描述用户引导步骤的类的设计"></a>描述用户引导步骤的类的设计</h3><p>为了描述一个引导步骤，首先要判断当前页面是否应该被引导，通过ViewController的类型来判断；其次需要的是可交互控件，通过keyPath来寻找；除此之外，还需要对用户的提示信息，这个类的具体设计如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@interface SGGuideNode : NSObject</div><div class="line"></div><div class="line">@property (nonatomic, assign) Class controllerClass;</div><div class="line">@property (nonatomic, strong) NSString *permitViewPath;</div><div class="line">@property (nonatomic, copy) NSString *message;</div><div class="line">@property (nonatomic, assign) BOOL reverse;</div><div class="line"></div><div class="line">+ (instancetype)nodeWithController:(Class)controller permitViewPath:(NSString *)permitViewPath message:(NSString *)message reverse:(BOOL)reverse;</div><div class="line">+ (instancetype)endNodeWithController:(Class)controller;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure></p>
<p>其中reverse是一个用于反转遮盖与可交互控件的属性，用于类似于“进行一项除去退出以外的操作”的情景。<br>通过两个类方法可快速的创建一个步骤结点，endNode作为结束结点，用于判断用户引导是否结束。</p>
<h3 id="遮盖层视图设计"><a href="#遮盖层视图设计" class="headerlink" title="遮盖层视图设计"></a>遮盖层视图设计</h3><h4 id="拦截交互事件"><a href="#拦截交互事件" class="headerlink" title="拦截交互事件"></a>拦截交互事件</h4><p>遮盖层视图需要盖住界面，并且在可交互区域“挖洞”，要实现这种功能，可以通过pointInside:withEvent:方法处理点击事件，对于落在洞外的点交给遮盖层处理，也就是返回YES，这样就保证了原来的交互事件被拦截。<br>其中permitRect为允许交互的视图的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event &#123;</div><div class="line">    BOOL ret = !CGRectContainsPoint(self.permitRect, point);</div><div class="line">    if (self.node.reverse) &#123;</div><div class="line">        ret = !ret;</div><div class="line">    &#125;</div><div class="line">    return ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="绘制遮盖区域与允许点击区域"><a href="#绘制遮盖区域与允许点击区域" class="headerlink" title="绘制遮盖区域与允许点击区域"></a>绘制遮盖区域与允许点击区域</h4><p>处理完了点击事件，我们只需要通过drawRect:在遮盖区绘制透明的灰色，在允许交互区域绘制透明色即可做出预想的效果。<br>首先我们要定义出maskColor和holeColor，然后先对整个遮盖层视图填充maskColor，再对允许交互区填充holeColor。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)drawRect:(CGRect)rect &#123;</div><div class="line">    // 省略maskColor、holeColor的定义与赋值代码</div><div class="line">    [maskColor setFill];</div><div class="line">    UIRectFill(rect);</div><div class="line">    // 省略允许点击区域permitRect的计算代码</div><div class="line">    [holeColor setFill];</div><div class="line">    UIRectFill(self.permitRect);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="计算说明文字的区域"><a href="#计算说明文字的区域" class="headerlink" title="计算说明文字的区域"></a>计算说明文字的区域</h4><p>接下来一个问题是提示文字的位置，提示文字应该紧贴可交互区域，并且应该尽可能拥有更多的空间，因此我们需要计算可交互区域四周的面积，并选择一块最大的区域。</p>
<h4 id="添加遮盖层"><a href="#添加遮盖层" class="headerlink" title="添加遮盖层"></a>添加遮盖层</h4><p>最最关键的问题是遮盖层应该添加到谁的view身上，由于在触发一个引导步骤时已经拿到了当前显示的视图控制器（引导步骤的触发通过拦截viewWillAppear:实现，因此可以拿到视图控制器对象），因此添加变得十分简单。<br><strong>不要简单的认为将遮盖层添加到视图控制器的view即可，因为视图控制器可能有NavigationController或者TabbarController包裹，如果只是添加到视图控制器的view无法盖住顶部和底部区域</strong><br>基于这个考虑，我们按照tabBarController.view&gt;navigationController.view&gt;viewController.view的优先级来添加遮盖层。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (void)showInViewController:(UIViewController *)viewController &#123;</div><div class="line">    // 每次显示前，保证显示中的遮盖层已经被移除，通过removeFromSuperview移除。</div><div class="line">    [self hide];</div><div class="line">    self.permitView = [viewController valueForKeyPath:self.node.permitViewPath];</div><div class="line">    self.messageLabel.text = self.node.message;</div><div class="line">    if (viewController.tabBarController) &#123;</div><div class="line">        [viewController.tabBarController.view addSubview:self];</div><div class="line">    &#125;else if (viewController.navigationController) &#123;</div><div class="line">        [viewController.navigationController.view addSubview:self];</div><div class="line">    &#125; else &#123;</div><div class="line">        [viewController.view addSubview:self];</div><div class="line">    &#125;</div><div class="line">    self.frame = self.superview.frame;</div><div class="line">    [self setNeedsDisplay];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里包含了对步骤结点的解析，注意遮盖的尺寸与要盖住的视图大小一致，最后一句会触发drawRect:根据最新的结点解析数据绘制遮盖层与允许交互层。</p>
<h4 id="移除遮盖层"><a href="#移除遮盖层" class="headerlink" title="移除遮盖层"></a>移除遮盖层</h4><p>移除遮盖层，只需要调用removeFromSuperview即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (void)hide &#123;</div><div class="line">    [self removeFromSuperview];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="调度器的设计"><a href="#调度器的设计" class="headerlink" title="调度器的设计"></a>调度器的设计</h3><h4 id="调度器类的设计"><a href="#调度器类的设计" class="headerlink" title="调度器类的设计"></a>调度器类的设计</h4><p>要实现步骤的切换，需要一个全局调度器，它接收切面通知或者用户的手动通知来对步骤进行判断与切换。所有的步骤结点都被以数组的形式保存到调度器中，调度器通过游标cur来判断当前进行到的步骤。<br>为了使用方便，编程者只需要将结点数组传递给调度器，调度器便会自动开始处理步骤的判断与切换，例如下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (void)setupGuide &#123;</div><div class="line">    SGGuideDispatcher *dp = [SGGuideDispatcher sharedDispatcher];</div><div class="line">    dp.nodes = @[</div><div class="line">                 [SGGuideNode nodeWithController:[FirstViewController class] permitViewPath:@&quot;addBtn&quot; message:@&quot;Please Click The Add Button And Choose Yes From the Alert.&quot; reverse:NO],</div><div class="line">                 [SGGuideNode nodeWithController:[FirstViewController class] permitViewPath:@&quot;wrap.innerView&quot; message:@&quot;Please Click the Info Button&quot; reverse:NO],</div><div class="line">                 [SGGuideNode nodeWithController:[SecondViewController class] permitViewPath:@&quot;tabBarController.tabBar&quot; message:@&quot;Please Change To Third Page&quot; reverse:NO],</div><div class="line">                 [SGGuideNode endNodeWithController:[ThirdViewController class]]</div><div class="line">                 ];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>为了实现这样的效果，需要将调度器设计成单例，并且通过nodes数组这一属性接收步骤结点，上面提到，不涉及到页面切换的步骤完成无法被捕获，因此需要用户手动推进，因此调度器还需要一个next方法来进行手动推进，综上所述，调度器的设计如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@interface SGGuideDispatcher : NSObject</div><div class="line"></div><div class="line">@property (nonatomic, strong) NSArray&lt;SGGuideNode *&gt; *nodes;</div><div class="line"></div><div class="line">+ (instancetype)sharedDispatcher;</div><div class="line">- (void)next;</div><div class="line">// 重置引导步骤，用于调试</div><div class="line">- (void)reset;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure></p>
<h4 id="拦截器设计"><a href="#拦截器设计" class="headerlink" title="拦截器设计"></a>拦截器设计</h4><p>上文提到，我们通过拦截viewWillAppear:方法来触发步骤的判断与切换，可以通过为UIViewController添加分类实现，在拦截后发出通知，以供调度器接收，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@implementation UIViewController (Tracking)</div><div class="line"></div><div class="line">+ (void)load &#123;</div><div class="line">    method_exchangeImplementations(class_getInstanceMethod([self class], @selector(viewWillAppear:)), class_getInstanceMethod([self class], @selector(track_viewWillAppear:)));</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)track_viewWillAppear:(BOOL)animated &#123;</div><div class="line">    [self track_viewWillAppear:animated];</div><div class="line">    [[NSNotificationCenter defaultCenter] postNotificationName:SGGuideTrigNotification object:@&#123;@&quot;viewController&quot;:self&#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure></p>
<h4 id="调度器开始调度的时机"><a href="#调度器开始调度的时机" class="headerlink" title="调度器开始调度的时机"></a>调度器开始调度的时机</h4><p>上文提到调度器开始工作的时机是接收到步骤结点后，因此通过重写结点数组的setter来注册对拦截器通知的监听即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)setNodes:(NSArray&lt;SGGuideNode *&gt; *)nodes &#123;</div><div class="line">    _nodes = nodes;</div><div class="line">    // 重置游标</div><div class="line">    self.cur = 0;</div><div class="line">    // 防止重复注册</div><div class="line">    [[NSNotificationCenter defaultCenter] removeObserver:self];</div><div class="line">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(trig:) name:SGGuideTrigNotification object:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样的设计十分明了，但是不利于对引导结束后再次启动App不开启调度的编程，故改良如下，通过Preference记录引导步骤游标cur的值，对于结束的引导cur为-1，如果cur是-1，则不接收步骤结点，防止浪费内存。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (void)setNodes:(NSArray&lt;SGGuideNode *&gt; *)nodes &#123;</div><div class="line">    if ([[NSUserDefaults standardUserDefaults] integerForKey:kSGGuideDispatcherCur] == -1) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    _nodes = nodes;</div><div class="line">    if (self.cur &lt; nodes.count) &#123;</div><div class="line">        [[NSNotificationCenter defaultCenter] removeObserver:self];</div><div class="line">        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(trig:) name:SGGuideTrigNotification object:nil];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="调度器触发的时机"><a href="#调度器触发的时机" class="headerlink" title="调度器触发的时机"></a>调度器触发的时机</h4><p>通过上文我们知道，拦截器的通知触发了调度器的trig:方法，trig:方法用于处理调度器的触发逻辑，除此之外，还有手动触发调度器的方式，也通过发送通知实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (void)next &#123;</div><div class="line">    if (!self.currentViewController) return;</div><div class="line">    [[NSNotificationCenter defaultCenter] postNotificationName:SGGuideTrigNotification object:@&#123;@&quot;viewController&quot;:self.currentViewController&#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里的currentViewController为当前展示的视图控制器，这个值在每次调度器触发时根据通知中的视图控制器来赋值，由于next前还没有进行页面切换，因此当前的视图控制器不变，依然是currentViewController。</p>
<h4 id="调度器的触发逻辑"><a href="#调度器的触发逻辑" class="headerlink" title="调度器的触发逻辑"></a>调度器的触发逻辑</h4><p>调度器每次触发时，首先根据游标拿出当前步骤结点，并判断当前显示的视图控制器是否和步骤结点要求的匹配，如果匹配，则添加遮盖，并将游标后移。<br>上文提到最后一个步骤结点是endNode，用于判断调度的结束，endNode与其他步骤结点的区别是允许交互的视图的keyPath为空，一旦发现keyPath为空，则认为调度结束，清空nodes释放内存并且移除通知，并记录游标的值为-1，以防止下次打开App时重复启动调度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (void)trig:(NSNotification *)nof &#123;</div><div class="line">    if (self.cur &gt;= self.nodes.count) return;</div><div class="line">    SGGuideMaskView *maskView = [SGGuideMaskView sharedMask];</div><div class="line">    UIViewController *topVc = nof.object[@&quot;viewController&quot;];</div><div class="line">    SGGuideNode *node = self.nodes[self.cur];</div><div class="line">    if ([topVc isKindOfClass:node.controllerClass]) &#123;</div><div class="line">        self.currentViewController = topVc;</div><div class="line">        [maskView hide];</div><div class="line">        self.cur++;</div><div class="line">        if (node.permitViewPath == nil) &#123;</div><div class="line">            self.nodes = nil;</div><div class="line">            [[NSNotificationCenter defaultCenter] removeObserver:self];</div><div class="line">            [[NSUserDefaults standardUserDefaults] setInteger:-1 forKey:kSGGuideDispatcherCur];</div><div class="line">            [[NSUserDefaults standardUserDefaults] synchronize];</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        maskView.node = node;</div><div class="line">        [maskView showInViewController:topVc];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>实现用户引导有三个关键的类，引导结点<code>SGGuideNode</code>、遮盖层<code>SGGuideMaskView</code>和调度器<code>SGGuideDispatcher</code>，将引导结点的数组传递给调度器即可开始调度，调度的触发分为手动和自动两种方式，拦截器（UIViewController的分类）对页面切换进行拦截并触发调度，不涉及到页面切换的调度需要编程者通过调度器的next方法实现。每次触发调度时先判断是否与引导结点相符，相符则添加遮盖层并向后推进。<br>通过这样的设计，实现了几乎无侵入的用户引导，它不会破坏工程的结构，能提供良好的用户引导效果。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WiFi文件上传框架SGWiFiUpload]]></title>
      <url>http://superleehome.oschina.io/2016/07/26/WiFi%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%A1%86%E6%9E%B6SGWiFiUpload/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在iOS端由于文件系统的封闭性，文件的上传变得十分麻烦，一个比较好的解决方案是通过局域网WiFi来传输文件并存储到沙盒中。</p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://github.com/Soulghost/SGWiFiUpload" target="_blank" rel="external">SGWiFiUpload</a>是一个基于<a href="https://github.com/robbiehanson/CocoaHTTPServer" target="_blank" rel="external">CocoaHTTPServer</a>的WiFi上传框架。CocoaHTTPServer是一个可运行于iOS和OS X上的轻量级服务端框架，可以处理GET和POST请求，通过对代码的初步改造，实现了iOS端的WiFi文件上传与上传状态监听。</p>
<h3 id="下载与使用"><a href="#下载与使用" class="headerlink" title="下载与使用"></a>下载与使用</h3><p>目前已经做成了易用的框架，上传到了GitHub，<a href="https://github.com/Soulghost/SGWiFiUpload" target="_blank" rel="external">点击这里进入</a>，欢迎Star！</p>
<h3 id="请求的处理"><a href="#请求的处理" class="headerlink" title="请求的处理"></a>请求的处理</h3><p>CocoaHTTPServer通过HTTPConnection这一接口实现类来回调网络请求的各个状态，包括对请求头、响应体的解析等。为了实现文件上传，需要自定义一个继承HTTPConnection的类，这里命名为<code>SGHTTPConnection</code>，与文件上传有关的几个方法如下。</p>
<h4 id="解析文件上传的请求头"><a href="#解析文件上传的请求头" class="headerlink" title="解析文件上传的请求头"></a>解析文件上传的请求头</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">- (void)processStartOfPartWithHeader:(MultipartMessageHeader*) header &#123;</div><div class="line"></div><div class="line">	// in this sample, we are not interested in parts, other then file parts.</div><div class="line">	// check content disposition to find out filename</div><div class="line"></div><div class="line">    MultipartMessageHeaderField* disposition = [header.fields objectForKey:@&quot;Content-Disposition&quot;];</div><div class="line">	NSString* filename = [[disposition.params objectForKey:@&quot;filename&quot;] lastPathComponent];</div><div class="line"></div><div class="line">    if ( (nil == filename) || [filename isEqualToString: @&quot;&quot;] ) &#123;</div><div class="line">        // it&apos;s either not a file part, or</div><div class="line">		// an empty form sent. we won&apos;t handle it.</div><div class="line">		return;</div><div class="line">	&#125;</div><div class="line">    // 这里用于发出文件开始上传的通知</div><div class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">        [[NSNotificationCenter defaultCenter] postNotificationName:SGFileUploadDidStartNotification object:@&#123;@&quot;fileName&quot; : filename ?: @&quot;File&quot;&#125;];</div><div class="line">    &#125;);</div><div class="line">    // 这里用于设置文件的保存路径，先预存一个空文件，然后进行追加写内容</div><div class="line">    NSString *uploadDirPath = [SGWiFiUploadManager sharedManager].savePath;</div><div class="line">	BOOL isDir = YES;</div><div class="line">	if (![[NSFileManager defaultManager]fileExistsAtPath:uploadDirPath isDirectory:&amp;isDir ]) &#123;</div><div class="line">		[[NSFileManager defaultManager]createDirectoryAtPath:uploadDirPath withIntermediateDirectories:YES attributes:nil error:nil];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    NSString* filePath = [uploadDirPath stringByAppendingPathComponent: filename];</div><div class="line">    if( [[NSFileManager defaultManager] fileExistsAtPath:filePath] ) &#123;</div><div class="line">        storeFile = nil;</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">		HTTPLogVerbose(@&quot;Saving file to %@&quot;, filePath);</div><div class="line">		if(![[NSFileManager defaultManager] createDirectoryAtPath:uploadDirPath withIntermediateDirectories:true attributes:nil error:nil]) &#123;</div><div class="line">			HTTPLogError(@&quot;Could not create directory at path: %@&quot;, filePath);</div><div class="line">		&#125;</div><div class="line">		if(![[NSFileManager defaultManager] createFileAtPath:filePath contents:nil attributes:nil]) &#123;</div><div class="line">			HTTPLogError(@&quot;Could not create file at path: %@&quot;, filePath);</div><div class="line">		&#125;</div><div class="line">		storeFile = [NSFileHandle fileHandleForWritingAtPath:filePath];</div><div class="line">		[uploadedFiles addObject: [NSString stringWithFormat:@&quot;/upload/%@&quot;, filename]];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中有中文注释的两处是比较重要的地方，这里根据请求头发出了文件开始上传的通知，并且往要存放的路径写一个空文件，以便后续追加内容。</p>
<h4 id="上传过程中的处理"><a href="#上传过程中的处理" class="headerlink" title="上传过程中的处理"></a>上传过程中的处理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">- (void) processContent:(NSData*) data WithHeader:(MultipartMessageHeader*) header</div><div class="line">&#123;</div><div class="line">	// here we just write the output from parser to the file.</div><div class="line">    // 由于除去文件内容外，还有HTML内容和空文件通过此方法处理，因此需要过滤掉HTML和空文件内容</div><div class="line">    if (!header.fields[@&quot;Content-Disposition&quot;]) &#123;</div><div class="line">        return;</div><div class="line">    &#125; else &#123;</div><div class="line">        MultipartMessageHeaderField *field = header.fields[@&quot;Content-Disposition&quot;];</div><div class="line">        NSString *fileName = field.params[@&quot;filename&quot;];</div><div class="line">        if (fileName.length == 0) return;</div><div class="line">    &#125;</div><div class="line">    self.currentLength += data.length;</div><div class="line">    CGFloat progress;</div><div class="line">    if (self.contentLength == 0) &#123;</div><div class="line">        progress = 1.0f;</div><div class="line">    &#125; else &#123;</div><div class="line">        progress = (CGFloat)self.currentLength / self.contentLength;</div><div class="line">    &#125;</div><div class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">       [[NSNotificationCenter defaultCenter] postNotificationName:SGFileUploadProgressNotification object:@&#123;@&quot;progress&quot; : @(progress)&#125;];</div><div class="line">    &#125;);</div><div class="line">	if (storeFile) &#123;</div><div class="line">		[storeFile writeData:data];</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里除了拼接文件内容以外，还发出了上传进度的通知，当前方法中只能拿到这一段文件的长度，总长度需要通过下面的方法拿到。</p>
<h4 id="获取文件大小"><a href="#获取文件大小" class="headerlink" title="获取文件大小"></a>获取文件大小</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (void)prepareForBodyWithSize:(UInt64)contentLength</div><div class="line">&#123;</div><div class="line">	HTTPLogTrace();</div><div class="line">	// 设置文件总大小，并初始化当前已经传输的文件大小。</div><div class="line">    self.contentLength = contentLength;</div><div class="line">    self.currentLength = 0;</div><div class="line">	// set up mime parser</div><div class="line">    NSString* boundary = [request headerField:@&quot;boundary&quot;];</div><div class="line">    parser = [[MultipartFormDataParser alloc] initWithBoundary:boundary formEncoding:NSUTF8StringEncoding];</div><div class="line">    parser.delegate = self;</div><div class="line"></div><div class="line">	uploadedFiles = [[NSMutableArray alloc] init];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="处理传输完毕"><a href="#处理传输完毕" class="headerlink" title="处理传输完毕"></a>处理传输完毕</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">- (void) processEndOfPartWithHeader:(MultipartMessageHeader*) header</div><div class="line">&#123;</div><div class="line">    // as the file part is over, we close the file.</div><div class="line">    // 由于除去文件内容外，还有HTML内容和空文件通过此方法处理，因此需要过滤掉HTML和空文件内容</div><div class="line">    if (!header.fields[@&quot;Content-Disposition&quot;]) &#123;</div><div class="line">        return;</div><div class="line">    &#125; else &#123;</div><div class="line">        MultipartMessageHeaderField *field = header.fields[@&quot;Content-Disposition&quot;];</div><div class="line">        NSString *fileName = field.params[@&quot;filename&quot;];</div><div class="line">        if (fileName.length == 0) return;</div><div class="line">    &#125;</div><div class="line">	[storeFile closeFile];</div><div class="line">	storeFile = nil;</div><div class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">        [[NSNotificationCenter defaultCenter] postNotificationName:SGFileUploadDidEndNotification object:nil];</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里关闭了文件管道，并且发出了文件上传完毕的通知。</p>
<h3 id="开启Server"><a href="#开启Server" class="headerlink" title="开启Server"></a>开启Server</h3><p>CocoaHTTPServer默认的Web根目录为MainBundle，他会在目录下寻找index.html，文件上传的请求地址为upload.html，当以POST方式请求upload.html时，请求会被Server拦截，并且交由HTTPConnection处理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (BOOL)startHTTPServerAtPort:(UInt16)port &#123;</div><div class="line">    HTTPServer *server = [HTTPServer new];</div><div class="line">    server.port = port;</div><div class="line">    self.httpServer = server;</div><div class="line">    [self.httpServer setDocumentRoot:self.webPath];</div><div class="line">    [self.httpServer setConnectionClass:[SGHTTPConnection class]];</div><div class="line">    NSError *error = nil;</div><div class="line">    [self.httpServer start:&amp;error];</div><div class="line">    return error == nil;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在HTML中发送POST请求上传文件"><a href="#在HTML中发送POST请求上传文件" class="headerlink" title="在HTML中发送POST请求上传文件"></a>在HTML中发送POST请求上传文件</h3><p>在CocoaHTTPServer给出的样例中有用于文件上传的index.html，要实现文件上传，只需要一个POST方法的form表单，action为upload.html，每一个文件使用一个input标签，type为file即可，这里为了美观对input标签进行了自定义。<br>下面的代码演示了能同时上传3个文件的index.html代码。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">\</span>"<span class="attr">content-type</span>\" <span class="attr">content</span>=<span class="string">\</span>"<span class="attr">text</span>/<span class="attr">html</span>; <span class="attr">charset</span>=<span class="string">UTF-8\</span>"&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">    body &#123;</div><div class="line">        margin: 0px;</div><div class="line">        padding: 0px;</div><div class="line">        font-size: 12px;</div><div class="line">        background-color: rgb(244,244,244);</div><div class="line">        text-align: center;</div><div class="line">    &#125;</div><div class="line">    #container &#123;</div><div class="line">        margin: auto;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    #form &#123;</div><div class="line">        margin-top: 60px;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .upload &#123;</div><div class="line">        margin-top: 2px;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    #submit input &#123;</div><div class="line">        background-color: #ea4c88;</div><div class="line">        color: #eee;</div><div class="line">        font-weight: bold;</div><div class="line">        margin-top: 10px;</div><div class="line">        text-align: center;</div><div class="line">        font-size: 16px;</div><div class="line">        border: none;</div><div class="line">        width: 120px;</div><div class="line">        height: 36px;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    #submit input:hover &#123;</div><div class="line">        background-color: #d44179;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    #submit input:active &#123;</div><div class="line">        background-color: #a23351;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .uploadField &#123;</div><div class="line">        margin-top: 2px;</div><div class="line">        width: 200px;</div><div class="line">        height: 22px;</div><div class="line">        font-size: 12px;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .uploadButton &#123;</div><div class="line">        background-color: #ea4c88;</div><div class="line">        color: #eee;</div><div class="line">        font-weight: bold;</div><div class="line">        text-align: center;</div><div class="line">        font-size: 15px;</div><div class="line">        border: none;</div><div class="line">        width: 80px;</div><div class="line">        height: 26px;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .uploadButton:hover &#123;</div><div class="line">        background-color: #d44179;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .uploadButton:active &#123;</div><div class="line">        background-color: #a23351;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>WiFi File Upload<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"form"</span> <span class="attr">action</span>=<span class="string">"upload.html"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">accept-charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upload1"</span> <span class="attr">id</span>=<span class="string">"upload1"</span> <span class="attr">style</span>=<span class="string">"display:none"</span> <span class="attr">onChange</span>=<span class="string">"document.form.path1.value=this.value"</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"uploadField"</span> <span class="attr">name</span>=<span class="string">"path1"</span> <span class="attr">readonly</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"uploadButton"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Open"</span> <span class="attr">onclick</span>=<span class="string">"document.form.upload1.click()"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upload2"</span> <span class="attr">id</span>=<span class="string">"upload2"</span> <span class="attr">style</span>=<span class="string">"display:none"</span> <span class="attr">onChange</span>=<span class="string">"document.form.path2.value=this.value"</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"uploadField"</span> <span class="attr">name</span>=<span class="string">"path2"</span> <span class="attr">readonly</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"uploadButton"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Open"</span> <span class="attr">onclick</span>=<span class="string">"document.form.upload2.click()"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upload3"</span> <span class="attr">id</span>=<span class="string">"upload3"</span> <span class="attr">style</span>=<span class="string">"display:none"</span> <span class="attr">onChange</span>=<span class="string">"document.form.path3.value=this.value"</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"uploadField"</span> <span class="attr">name</span>=<span class="string">"path3"</span> <span class="attr">readonly</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"uploadButton"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Open"</span> <span class="attr">onclick</span>=<span class="string">"document.form.upload3.click()"</span>&gt;</span></div><div class="line">                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"submit"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>表单提交后，会进入upload.html页面，该页面用于说明上传完毕，下面的代码实现了3秒后的重定向返回。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">\</span>"<span class="attr">content-type</span>\" <span class="attr">content</span>=<span class="string">\</span>"<span class="attr">text</span>/<span class="attr">html</span>; <span class="attr">charset</span>=<span class="string">UTF-8\</span>"&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">refresh</span> <span class="attr">content</span>=<span class="string">"3;url=index.html"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h3</span>&gt;</span>Upload Succeeded!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>The Page will be back in 3 seconds<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS图形手势识别框架SGGestureRecognizer]]></title>
      <url>http://superleehome.oschina.io/2016/07/26/iOS%E5%9B%BE%E5%BD%A2%E6%89%8B%E5%8A%BF%E8%AF%86%E5%88%AB%E6%A1%86%E6%9E%B6SGGestureRecognizer/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>苹果官方为我们提供了简单手势的识别器，但对于图形手势，例如五角星、三角形等的识别，就需要自己实现了。通过识别这些手势，可以去执行特定的操作，或是输入公式、释放魔法等，可以为App增光添彩。</p>
<h2 id="下载与使用"><a href="#下载与使用" class="headerlink" title="下载与使用"></a>下载与使用</h2><p>该框架已经上传到github，<a href="https://github.com/Soulghost/SGGestureRecognizer" target="_blank" rel="external">点击这里前去下载</a>，欢迎Star！<br>有关该框架的使用在github上已经写明，这里不再赘述，本文主要介绍的是图形手势识别的实现原理与框架的结构。</p>
<h2 id="框架的结构"><a href="#框架的结构" class="headerlink" title="框架的结构"></a>框架的结构</h2><p>一个图形手势是一条曲线，可以用采样点来描述，存储采样点的类为<code>SGGesturePoint</code>，使用它替代<code>CGPoint</code>，更符合面向对象的操作规范。<br>采样点的集合为<code>SGGestureSet</code>，它用于记录所有采样点以及手势的名称，以及标准化以后的手势向量。<br>手势向量使用<code>SGGestureVector</code>存储，向量通过将所有采样点的(x,y)坐标依次插入并标准化得来，手势向量用于进行余弦相似度计算。<br>用于标准化集合、生成向量、保存、加载与识别手势的类为<code>SGGestureManager</code>，它是一个单例对象，正常使用中只需要关心manager和set两个对象，其他对象由manager负责管理。</p>
<h2 id="手势采样的过程"><a href="#手势采样的过程" class="headerlink" title="手势采样的过程"></a>手势采样的过程</h2><h3 id="1-采样"><a href="#1-采样" class="headerlink" title="1.采样"></a>1.采样</h3><p>Demo中给出的是使用UIPanGestureRecognizer完成的采样，每个采样点都是一个<code>CGPoint</code>，将其包装秤<code>NSValue</code>并且存储在数组中。</p>
<h3 id="2-生成集合"><a href="#2-生成集合" class="headerlink" title="2.生成集合"></a>2.生成集合</h3><p>使用<code>SGGestureSet</code>的gestureSetWithName:points:方法，传入手势的名称与采样点（NSValue数组），即可使用采样点初始化一个集合。</p>
<h3 id="3-重新采样"><a href="#3-重新采样" class="headerlink" title="3.重新采样"></a>3.重新采样</h3><p>将集合中的所有采样点构成的图形看作折线，根据所需要的采样密度确定采样间距interval，并在原曲线上生成均匀分布的采样点，生成采样点的代码如下，代码后将结合图例进行讲解。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">// to resample the curve, calculate the length of the curve</div><div class="line">SGGestureSet *tempSet = *set;</div><div class="line">double sumLength = 0;</div><div class="line">for (int i = 1; i &lt; tempSet.countPoints; i++) &#123;</div><div class="line">    SGGesturePoint *pt1 = [tempSet pointAtIndex:i];</div><div class="line">    SGGesturePoint *pt2 = [tempSet pointAtIndex:i - 1];</div><div class="line">    sumLength += [pt1 distanceTo:pt2];</div><div class="line">&#125;</div><div class="line">// resample with sample uniform distributed points</div><div class="line">SGGestureSet *resampleSet = [SGGestureSet gestureSetWithName:tempSet.name];</div><div class="line">double Interval = sumLength / self.samplePointCount;</div><div class="line">double D = 0;</div><div class="line">SGGesturePoint *p1 = [tempSet pointAtIndex:0];</div><div class="line">[resampleSet addGesturePoint:p1];</div><div class="line">for (int i = 1; i &lt; tempSet.countPoints;) &#123;</div><div class="line">    SGGesturePoint *p2 = [tempSet pointAtIndex:i];</div><div class="line">    double d = [p1 distanceTo:p2];</div><div class="line">    if ((D + d) &gt;= Interval) &#123;</div><div class="line">        double k = (Interval - D ) / d;</div><div class="line">        double x = p1.x + k * (p2.x - p1.x);</div><div class="line">        double y = p1.y + k * (p2.y - p1.y);</div><div class="line">        SGGesturePoint *p = [SGGesturePoint gesturePointWithCGPoint:CGPointMake(x, y)];</div><div class="line">        [resampleSet addGesturePoint:p];</div><div class="line">        D = 0;</div><div class="line">        p1 = p;</div><div class="line">    &#125;else&#123;</div><div class="line">        D += d;</div><div class="line">        p1 = p2;</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中D用于折现拐点后确定下一采样点的距离，d为原集合中的相邻采样点间距，下图是某图形手势的局部折线图。<br>第一次进入循环时，P1为原集合的第一个采样点（也是重新采样集合的第一个点），P2为原集合的第二个采样点，他们之间的距离P大于重新采样的采样点间距interval，这时D=0，D+d=d&gt;interval，因此进入if分支。<br><img src="http://upload-images.jianshu.io/upload_images/2376201-c62d2b5c430d2340.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>接下来根据interval与d的比例关系求出x、y的步进值，从而得到下一个重新采样点的坐标点，并且这个点作为新的P1。<br><img src="http://upload-images.jianshu.io/upload_images/2376201-e62c42d1a24fe233.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>以此类推，由于折线段的长度比interval大的多，因此能够分布许多新采样点，直到P1足够接近P2，使得interval&gt;d，如下图所示。<br><img src="http://upload-images.jianshu.io/upload_images/2376201-e3f2f6373e189e1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>这时下一个采样点应该落在下一个折线段上，并且为了保证均匀分布，下一个采样点距离折线段拐点的距离应该减去当前P1到P2的距离，这就是D的作用了。下图说明了这个计算的目的。<br><img src="http://upload-images.jianshu.io/upload_images/2376201-aebaa8a1ad546f9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>这时候会进入else分支，将P1更新为P2坐标，并且将d累加到D中，需要注意的是，下一个P2的坐标并不是原集合中的点，而是根据D计算出的点，因此应该跳过原集合中的下一个点，这就是i++的作用。如果曲线有足够多的短折线段，则会不断的进入else分支，一直累加d，直到满足新采样点间距，也就是D+d&gt;=interval，才生成一个新的采样点，本图中的情况仅仅计算了一次D就进入了下一条比较长的折线段，这时候清空D，开始在折线段上分布采样点，如下图所示。<br><img src="http://upload-images.jianshu.io/upload_images/2376201-c433974c7a074f23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>经过多次这样的运算，就可以完成均匀分布的重新采样了，之后使用的是重新采样点的集合。</p>
<h3 id="4-曲线位置的标准化"><a href="#4-曲线位置的标准化" class="headerlink" title="4.曲线位置的标准化"></a>4.曲线位置的标准化</h3><p>将集合中的x、y分别求平均值，得到曲线的重心，根据重心坐标将曲线移动到坐标原点，得到标准位置的曲线。</p>
<h3 id="5-曲线尺寸的标准化"><a href="#5-曲线尺寸的标准化" class="headerlink" title="5.曲线尺寸的标准化"></a>5.曲线尺寸的标准化</h3><p>根据曲线的外接矩形与标准尺寸将曲线上的每个点进行比例运算，即可得到缩放到标准尺寸的曲线。</p>
<h3 id="6-曲线转角的标准化"><a href="#6-曲线转角的标准化" class="headerlink" title="6.曲线转角的标准化"></a>6.曲线转角的标准化</h3><p>根据曲线上的第一个采样点与中心的连线的角度对曲线进行标准化，设当前角度为iAngle，目标角度为r，则如下图所示经过坐标变换将曲线旋转到红色位置。<br><img src="http://upload-images.jianshu.io/upload_images/2376201-de40f0616fa8297e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="7-生成向量"><a href="#7-生成向量" class="headerlink" title="7.生成向量"></a>7.生成向量</h3><p>为了进行后续运算，需要将二元采样点集化为一元集合，也可以看做多维向量，方法是依次将采样点的x、y坐标插入一元集合，并对向量进行标准化，每个向量代表一个手势，可用于后续的比较运算。</p>
<h2 id="手势识别的过程"><a href="#手势识别的过程" class="headerlink" title="手势识别的过程"></a>手势识别的过程</h2><p>对于需要识别的手势，先经过上面的运算得到手势向量，然后将这个手势向量与手势库中的向量逐一进行余弦相似度的运算，余弦相似度比较的是向量的夹角，夹角越小则越相似，根据一定的阈值来筛选出符合条件的所有手势，并在遍历结束后取最优（运算结果最小）的作为匹配结果。<br>余弦相似度的计算代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (double)cosDistanceWithVector1:(SGGestureVector *)vec1 vector2:(SGGestureVector *)vec2 &#123;</div><div class="line">    double a = 0;</div><div class="line">    double b = 0;</div><div class="line">    for (int i = 0; i &lt;= vec1.length - 1 &amp;&amp; i &lt;= vec2.length - 1; i+=2) &#123;</div><div class="line">        a += [vec1 doubleAtIndex:i] * [vec2 doubleAtIndex:i] + [vec1 doubleAtIndex:i + 1] * [vec2 doubleAtIndex:i + 1];</div><div class="line">        b += [vec1 doubleAtIndex:i] * [vec2 doubleAtIndex:i + 1] - [vec1 doubleAtIndex:i + 1] * [vec2 doubleAtIndex:i];</div><div class="line">    &#125;</div><div class="line">    double angle = atan(b / a);</div><div class="line">    return acos(a * cos(angle) + b * sin(angle));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>识别一个手势的代码如下，先标准化手势集合并得到向量，然后在手势库中筛选，最后选择最优结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">- (NSString *)recognizeGestureSet:(SGGestureSet *)set &#123;</div><div class="line">    [self standardizeSet:&amp;set];</div><div class="line">    SGGestureVector *vec1 = [set getVector];</div><div class="line">    SGGestureSet *bestSet = nil;</div><div class="line">    double minD = CGFLOAT_MAX;</div><div class="line">    for (int i = 0; i &lt; self.gestureSets.count; i++) &#123;</div><div class="line">        SGGestureSet *libSet = self.gestureSets[i];</div><div class="line">        SGGestureVector *vec2 = [libSet getVector];</div><div class="line">        double D = [self cosDistanceWithVector1:vec1 vector2:vec2];</div><div class="line">        if(D &lt;= self.threshold &amp;&amp; D &lt; minD)&#123;</div><div class="line">            minD = D;</div><div class="line">            bestSet = libSet;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return bestSet.name;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="手势的存取"><a href="#手势的存取" class="headerlink" title="手势的存取"></a>手势的存取</h2><p>以上介绍的每一个与存储有关的类都遵循NSCoding协议，将每一个标准化的<code>SGGestureSet</code>存入到数组中，并将数组利用<code>NSKeyedArchiver</code>归档存储到磁盘，需要读取时再通过<code>NSKeyedUnarchiver</code>反归档即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sublime Text 2 插件]]></title>
      <url>http://superleehome.oschina.io/2016/07/26/SublimeText2%E5%AE%9E%E7%94%A8%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><blockquote>
<p>下面会介绍很多有用的插件，个人感觉，最有用的是ZenCoding,现在更名叫Emmet.所以，作为html/css编译器，其他插件可以不安装，这个强烈建议安装一下</p>
</blockquote>
<a id="more"></a>
<h2 id="安装篇"><a href="#安装篇" class="headerlink" title="安装篇"></a>安装篇</h2><h3 id="插件安装方法"><a href="#插件安装方法" class="headerlink" title="插件安装方法"></a>插件安装方法</h3><ol>
<li>直接安装<br>安装Sublime text 2插件很方便，可以直接下载安装包解压缩到Packages目录（菜单-&gt;preferences-&gt;packages）</li>
<li>使用Package Control组件安装<br>也可以安装package control组件，然后直接在线安装:<br>按<em>Ctrl+`</em>调出console,粘贴以下代码到底部命令行并回车：<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2,os;</div><div class="line">pf=<span class="string">'Package Control.sublime-package'</span>;</div><div class="line">ipp=sublime.installed_packages_path();</div><div class="line">os.makedirs(ipp)</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(ipp)</div><div class="line"><span class="keyword">else</span> <span class="keyword">None</span>;</div><div class="line">open(os.path.join(ipp,pf),<span class="string">'wb'</span>).write(urllib2.urlopen(<span class="string">'http://sublime.wbond.net/'</span>+pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).read())</div></pre></td></tr></table></figure>
</li>
</ol>
<p>重启Sublime Text 2。<br>如果在Perferences-&gt;package settings中看到package control这一项，则安装成功。<br>如果这种方法不能安装成功，可以<a href="https://packagecontrol.io/installation" target="_blank" rel="external">到这里下载文件</a>手动安装。<br>用Package Control安装插件的方法：</p>
<blockquote>
<p>按下Ctrl+Shift+P调出命令面板,输入install 调出 Install Package 选项并回车,然后在列表中选中要安装的插件。</p>
</blockquote>
<h2 id="插件篇"><a href="#插件篇" class="headerlink" title="插件篇"></a>插件篇</h2><h3 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h3><p>这个，不解释了，还不知道ZenCoding的同学强烈推荐去看一下：<a href="https://www.qianduan.net/zen-coding-a-new-way-to-write-html-code/" target="_blank" rel="external">《Zen Coding: 一种快速编写HTML/CSS代码的方法》</a>。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">div#page&gt;div.logo+ul#navigation&gt;li*5&gt;a</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"page"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"navigation"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>Zen Coding for Sublime Text 2插件的开发者已经停止了在Github上共享了，现在只有通过Package Control来安装</p>
</blockquote>
<h3 id="jQuery-Package-for-sublime-Text"><a href="#jQuery-Package-for-sublime-Text" class="headerlink" title="jQuery Package for sublime Text"></a>jQuery Package for sublime Text</h3><p>如果你离不开jQuery的话，这个必备～～</p>
<h3 id="Sublime-Prefixr"><a href="#Sublime-Prefixr" class="headerlink" title="Sublime Prefixr"></a>Sublime Prefixr</h3><p>Prefixr，CSS3 私有前缀自动补全插件，显然也很有用哇<br><img src="http://img.imooc.com/5594b1040001376806070201.png" alt=""></p>
<h3 id="JS-Format"><a href="#JS-Format" class="headerlink" title="JS Format"></a>JS Format</h3><p>一个JS代码格式化插件</p>
<h3 id="SublimeLinter"><a href="#SublimeLinter" class="headerlink" title="SublimeLinter"></a>SublimeLinter</h3><p>一个支持lint语法的插件，可以高亮linter认为有错误的代码行，也支持高亮一些特别的注释，比如“TODO”，这样就可以被快速定位。（IntelliJ IDEA的TODO功能很赞，这个插件虽然比不上，但是也够用了吧）<br><img src="http://img.imooc.com/5594b17f0001435803860138.png" alt=""></p>
<h3 id="Placeholders"><a href="#Placeholders" class="headerlink" title="Placeholders"></a>Placeholders</h3><p>故名思意，占位用，包括一些占位文字和HTML代码片段，实用。</p>
<h3 id="Sublime-Alignment"><a href="#Sublime-Alignment" class="headerlink" title="Sublime Alignment"></a>Sublime Alignment</h3><p>用于代码格式的自动对齐。传说最新版Sublime 已经集成。<br><img src="http://img.imooc.com/5594b19e0001f47304020139.png" alt=""></p>
<h3 id="Clipboard-History"><a href="#Clipboard-History" class="headerlink" title="Clipboard History"></a>Clipboard History</h3><p>粘贴板历史记录，方便使用复制/剪切的内容</p>
<h3 id="DetectSyntax"><a href="#DetectSyntax" class="headerlink" title="DetectSyntax"></a>DetectSyntax</h3><p>这是一个代码检测插件。</p>
<h3 id="Nettuts-Fetch"><a href="#Nettuts-Fetch" class="headerlink" title="Nettuts Fetch"></a>Nettuts Fetch</h3><p>如果你在用一些公用的或者开源的框架，比如 Normalize.css或者modernizr.js，但是，过了一段时间后，可能该开源库已经更新了，而你没有发现，这个时候可能已经不太适合你的项目了，那么你就要重新折腾一遍或者继续用陈旧的文件。Nettuts Fetch可以让你设置一些需要同步的文件列表，然后保存更新。<br><img src="http://img.imooc.com/5594b1c300010f3705980187.jpg" alt=""></p>
<h3 id="JsMinifier"><a href="#JsMinifier" class="headerlink" title="JsMinifier"></a>JsMinifier</h3><p>该插件基于Google Closure compiler，自动压缩js文件。</p>
<h3 id="Sublime-CodeIntel"><a href="#Sublime-CodeIntel" class="headerlink" title="Sublime CodeIntel"></a>Sublime CodeIntel</h3><p>代码自动提示</p>
<h3 id="Bracket-Highlighter"><a href="#Bracket-Highlighter" class="headerlink" title="Bracket Highlighter"></a>Bracket Highlighter</h3><p>类似于代码匹配，可以匹配括号，引号等符号内的范围<br><img src="http://img.imooc.com/5594b20400018c0d03670242.png" alt=""></p>
<h3 id="Hex-to-HSL"><a href="#Hex-to-HSL" class="headerlink" title="Hex to HSL"></a>Hex to HSL</h3><p>自动转换颜色值，从16进制到HSL格式，快捷键 Ctrl+Shift+U<br><img src="http://img.imooc.com/5594b21e0001835d03590087.png" alt=""></p>
<h3 id="GBK-to-UTF8"><a href="#GBK-to-UTF8" class="headerlink" title="GBK to UTF8"></a>GBK to UTF8</h3><p>将文件编码从GBK转黄成UTF8，快捷键Ctrl+Shift+C</p>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p><img src="http://img.imooc.com/5594b24000013eff06240306.png" alt=""><br>该插件基本上实现了git的所有功能。</p>
<blockquote>
<p>关于sublime text的插件就到这儿了，如果有更好用的，之后会继续添加<br>本文参考网址<a href="http://www.qianduan.net/essential-to-sublime-the-text-2-plugins.html" target="_blank" rel="external">http://www.qianduan.net/essential-to-sublime-the-text-2-plugins.html</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://superleehome.oschina.io/2016/07/26/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="http://superlee2013.github.io/" target="_blank" rel="external">Superlee’s blog</a></p>
<a id="more"></a>
<p>This is my first blog ,and I’ll be here to write down all little affairs as of my study.<br>Good luck to myself!<br><strong><em>Tribute to the programmer of Hello-World!</em></strong></p>
]]></content>
    </entry>
    
  
  
</search>
